// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package command

import mock "github.com/stretchr/testify/mock"

// CmdMock is an autogenerated mock type for the Cmd type
type CmdMock struct {
	mock.Mock
}

type CmdMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CmdMock) EXPECT() *CmdMock_Expecter {
	return &CmdMock_Expecter{mock: &_m.Mock}
}

// DryRun provides a mock function with given fields:
func (_m *CmdMock) DryRun() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CmdMock_DryRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DryRun'
type CmdMock_DryRun_Call struct {
	*mock.Call
}

// DryRun is a helper method to define mock.On call
func (_e *CmdMock_Expecter) DryRun() *CmdMock_DryRun_Call {
	return &CmdMock_DryRun_Call{Call: _e.mock.On("DryRun")}
}

func (_c *CmdMock_DryRun_Call) Run(run func()) *CmdMock_DryRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CmdMock_DryRun_Call) Return(_a0 bool) *CmdMock_DryRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CmdMock_DryRun_Call) RunAndReturn(run func() bool) *CmdMock_DryRun_Call {
	_c.Call.Return(run)
	return _c
}

// ExitCode provides a mock function with given fields:
func (_m *CmdMock) ExitCode() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CmdMock_ExitCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExitCode'
type CmdMock_ExitCode_Call struct {
	*mock.Call
}

// ExitCode is a helper method to define mock.On call
func (_e *CmdMock_Expecter) ExitCode() *CmdMock_ExitCode_Call {
	return &CmdMock_ExitCode_Call{Call: _e.mock.On("ExitCode")}
}

func (_c *CmdMock_ExitCode_Call) Run(run func()) *CmdMock_ExitCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CmdMock_ExitCode_Call) Return(_a0 int) *CmdMock_ExitCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CmdMock_ExitCode_Call) RunAndReturn(run func() int) *CmdMock_ExitCode_Call {
	_c.Call.Return(run)
	return _c
}

// PID provides a mock function with given fields:
func (_m *CmdMock) PID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CmdMock_PID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PID'
type CmdMock_PID_Call struct {
	*mock.Call
}

// PID is a helper method to define mock.On call
func (_e *CmdMock_Expecter) PID() *CmdMock_PID_Call {
	return &CmdMock_PID_Call{Call: _e.mock.On("PID")}
}

func (_c *CmdMock_PID_Call) Run(run func()) *CmdMock_PID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CmdMock_PID_Call) Return(_a0 int) *CmdMock_PID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CmdMock_PID_Call) RunAndReturn(run func() int) *CmdMock_PID_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *CmdMock) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CmdMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type CmdMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *CmdMock_Expecter) Start() *CmdMock_Start_Call {
	return &CmdMock_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *CmdMock_Start_Call) Run(run func()) *CmdMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CmdMock_Start_Call) Return(_a0 error) *CmdMock_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CmdMock_Start_Call) RunAndReturn(run func() error) *CmdMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *CmdMock) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CmdMock_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type CmdMock_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *CmdMock_Expecter) String() *CmdMock_String_Call {
	return &CmdMock_String_Call{Call: _e.mock.On("String")}
}

func (_c *CmdMock_String_Call) Run(run func()) *CmdMock_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CmdMock_String_Call) Return(_a0 string) *CmdMock_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CmdMock_String_Call) RunAndReturn(run func() string) *CmdMock_String_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *CmdMock) Wait() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CmdMock_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type CmdMock_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *CmdMock_Expecter) Wait() *CmdMock_Wait_Call {
	return &CmdMock_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *CmdMock_Wait_Call) Run(run func()) *CmdMock_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CmdMock_Wait_Call) Return(_a0 error) *CmdMock_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CmdMock_Wait_Call) RunAndReturn(run func() error) *CmdMock_Wait_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCmdMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewCmdMock creates a new instance of CmdMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCmdMock(t mockConstructorTestingTNewCmdMock) *CmdMock {
	mock := &CmdMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
