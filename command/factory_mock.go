// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package command

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FactoryMock is an autogenerated mock type for the Factory type
type FactoryMock struct {
	mock.Mock
}

type FactoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FactoryMock) EXPECT() *FactoryMock_Expecter {
	return &FactoryMock_Expecter{mock: &_m.Mock}
}

// NewCmd provides a mock function with given fields: ctx, name, args
func (_m *FactoryMock) NewCmd(ctx context.Context, name string, args []string) Cmd {
	ret := _m.Called(ctx, name, args)

	if len(ret) == 0 {
		panic("no return value specified for NewCmd")
	}

	var r0 Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) Cmd); ok {
		r0 = rf(ctx, name, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Cmd)
		}
	}

	return r0
}

// FactoryMock_NewCmd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCmd'
type FactoryMock_NewCmd_Call struct {
	*mock.Call
}

// NewCmd is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - args []string
func (_e *FactoryMock_Expecter) NewCmd(ctx interface{}, name interface{}, args interface{}) *FactoryMock_NewCmd_Call {
	return &FactoryMock_NewCmd_Call{Call: _e.mock.On("NewCmd", ctx, name, args)}
}

func (_c *FactoryMock_NewCmd_Call) Run(run func(ctx context.Context, name string, args []string)) *FactoryMock_NewCmd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *FactoryMock_NewCmd_Call) Return(_a0 Cmd) *FactoryMock_NewCmd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FactoryMock_NewCmd_Call) RunAndReturn(run func(context.Context, string, []string) Cmd) *FactoryMock_NewCmd_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactoryMock creates a new instance of FactoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FactoryMock {
	mock := &FactoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
