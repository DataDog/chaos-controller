# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
chaosNamespace: chaos-engineering # namespace where any resources get created.
skipNamespace: false # omit namespace declaration

global:
  oci:
    registry: k8s.io
  chaos:
    defaultImage:
      repo: to-override
      tag: latest
      digest: ""
      pullSecrets: false # name of the secret object to use when pulling images

controller:
  version: ""
  image:
    repo: chaos-controller
  enabled: true # should the controller and associated webhooks be deployed or not
  leaderElection: true
  deleteOnly: false # enable delete-only mode
  enableSafeguards: true # enable safeguards on targets selection (do not target the node running the controller)
  enableObserver: true # enable observer on targets, notifying of target warning status and events
  metricsSink: noop
  profilerSink: noop
  tracerSink: noop
  notifiers:
    common:
      clusterName: lima
    noop:
      enabled: true
    slack:
      enabled: false
      tokenFilepath: ""
      mirrorSlackChannelId: ""
    datadog:
      enabled: false
    http:
      enabled: false
      url: ""
      headersFilepath: ""
      headers: []
  cloudProviders: # cloud providers specific disruptions configuration
    disableAll: false # disable all cloud providers disruption, it overrides per cloud provider configuration (you can't disable all + enable one)
    pullInterval: 24h # pull interval used by the controller to update ip ranges files
    aws: # aws cloud provider config
      enabled: true # enable the provider
      ipRangesURL: "https://ip-ranges.amazonaws.com/ip-ranges.json" # URL to the IP ranges file (format must be the expected one, defaults is the public file provided by the cloud provider)
    gcp: # gcp cloud provider config
      enabled: true # enable the provider
      ipRangesURL: "https://www.gstatic.com/ipranges/goog.json" # URL to the IP ranges file (format must be the expected one, defaults is the public file provided by the cloud provider)
    datadog: # datadog cloud provider config
      enabled: true # enable the provider
      ipRangesURL: "https://ip-ranges.datadoghq.com/" # URL to the IP ranges file (format must be the expected one, defaults is the public file provided by the cloud provider)
  defaultDuration: 1h # default spec.duration for a disruption with none specified
  maxDuration: # maximum spec.duration for a disruption (example: 1h)
  expiredDisruptionGCDelay: 10m # time after a disruption expires before deleting it
  userInfoHook: true
  webhook: # admission webhook configuration
    generateCert: false # if you want Helm to generate certificates (e.g. in case the cert-manager is not installed in the cluster) set this to true
    certDir: "" # certificate directory (must contain tls.crt and tls.key files)
    host: "" # host to use to serve requests
    port: 9443 # port to use to serve requests
  safeMode:
    environment: ""
    enable: false
    namespaceThreshold: 80
    clusterThreshold: 66
  resources: # resources assigned to the controller pod. may need to be increased when deploying to larger scale clusters
    cpu: 100m
    memory: 300Mi
    ephemeralStorage: 1Gi
  disruptionCronEnabled: true
  disruptionRolloutEnabled: false
  disruptionDeletionTimeout: 15m # The duration after which a disruption will be marked as "stuck on removal" if its removal process exceeds this duration.

injector:
  image:
    repo: chaos-injector
  annotations: {} # extra annotations passed to the chaos injector pods
  labels: {} # extra labels passed to the chaos injector pods
  serviceAccount: chaos-injector # service account to use for the chaos injector pods
  dnsDisruption: # dns disruption configuration
    dnsServer: "" # IP address of the upstream dns server
    kubeDns:
      all
      # whether to use kube-dns for DNS resolution (default: "all"). Options:
      # : "off": use the DNS server defined in the controller configuration for all resolutions
      # : "internal": use kube-dns for internal hostnames resolution (`.local.` or `.internal.` suffixes), use the DNS server defined in the controller configuration for all other resolutions
      # : "all": use kube-dns for all resolutions
  networkDisruption: # network disruption general configuration
    hostResolveInterval: 1m # how often to re-resolve the hostnames we are disrupting traffic to
    allowedHosts: [] # list of always allowed hosts (even if explicitly blocked by a network disruption)
    # (here's the expected format, all fields are optional)
    # allowedHosts:
    #   - host: 10.0.0.0/8
    #     port: 80
    #     protocol: tcp
    #     flow: egress
    #   - host: 10.0.0.0/8
    #     port: 81
    #     protocol: tcp
    #     flow: ingress
handler:
  image:
    repo: chaos-handler
  enabled: true # enable the chaos handler (required to use the onInit disruption feature)
  timeout: 1m # time the handler init container will wait before exiting if no signal is received

proxy:
  image:
    registry: gcr.io
    repo: kubebuilder/kube-rbac-proxy
    tag: v0.4.1
