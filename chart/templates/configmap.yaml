# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2023 Datadog, Inc.

apiVersion: v1
kind: ConfigMap
metadata:
  name: chaos-controller-config
  namespace: {{ .Values.chaosNamespace }}
data:
  config.yaml: |
    controller:
      metricsBindAddr: "127.0.0.1:8080"
      leaderElection: true
      metrics:
        sink: {{ .Values.controller.metrics.sink | quote }}
      profiler:
        sink: {{ .Values.controller.profiler.sink | quote }}
      tracer:
        sink: {{ .Values.controller.tracer.sink | quote }}
        sampleRate: {{ .Values.controller.tracer.sampleRate }}
      enableSafeguards: {{ .Values.controller.enableSafeguards }}
      enableObserver: {{ .Values.controller.enableObserver }}
      notifiers:
        common:
          clusterName: {{ .Values.controller.notifiers.common.clusterName | quote }}
        noop:
          enabled: {{ .Values.controller.notifiers.noop.enabled }}
        slack:
          enabled: {{ .Values.controller.notifiers.slack.enabled }}
          tokenFilepath: {{ .Values.controller.notifiers.slack.tokenFilepath | quote }}
          mirrorSlackChannelId: {{ .Values.controller.notifiers.slack.mirrorSlackChannelId | quote }}
        http:
          enabled: {{ .Values.controller.notifiers.http.enabled }}
          url: {{ .Values.controller.notifiers.http.url | quote }}
          headers: {{- range .Values.controller.notifiers.http.headers }}
            - {{ . | quote }}
          {{- end }}
          headersFilepath: {{ .Values.controller.notifiers.http.headersFilepath | quote }}
        datadog:
          enabled: {{ .Values.controller.notifiers.datadog.enabled }}
      cloudProviders:
        disableAll: {{ .Values.controller.cloudProviders.disableAll }}
        pullInterval: {{ .Values.controller.cloudProviders.pullInterval }}
        aws:
          enabled: {{ .Values.controller.cloudProviders.aws.enabled }}
          ipRangesURL: {{ .Values.controller.cloudProviders.aws.ipRangesURL }}
        gcp:
          enabled: {{ .Values.controller.cloudProviders.gcp.enabled }}
          ipRangesURL: {{ .Values.controller.cloudProviders.gcp.ipRangesURL }}
        datadog:
          enabled: {{ .Values.controller.cloudProviders.datadog.enabled }}
          ipRangesURL: {{ .Values.controller.cloudProviders.datadog.ipRangesURL }}
      deleteOnly: {{ .Values.controller.deleteOnly }}
      imagePullSecrets: {{ .Values.images.pullSecrets }}
      defaultDuration: {{ .Values.controller.defaultDuration }}
      expiredDisruptionGCDelay: {{ .Values.controller.expiredDisruptionGCDelay }}
      userInfoHook: {{ .Values.controller.userInfoHook }}
      webhook:
        {{- if .Values.controller.webhook.generateCert }}
        certDir: /tmp/k8s-webhook-server/serving-certs
        {{- else }}
        certDir: {{ .Values.controller.webhook.certDir | quote }}
        {{- end }}
        host: {{ .Values.controller.webhook.host | quote }}
        port: {{ .Values.controller.webhook.port }}
      safeMode:
        environment: {{ .Values.controller.safeMode.environment }}
        enable: {{ .Values.controller.safeMode.enable }}
        namespaceThreshold: {{ .Values.controller.safeMode.namespaceThreshold }}
        clusterThreshold: {{ .Values.controller.safeMode.clusterThreshold }}
    injector:
      image: {{ .Values.images.injector | quote }}
      {{- if .Values.injector.annotations }}
      annotations:
        {{- range $key, $val := .Values.injector.annotations }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
      {{- end }}
      {{- if .Values.injector.labels }}
      labels:
        {{- range $key, $val := .Values.injector.labels }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
      {{- end }}
      serviceAccount: {{ .Values.injector.serviceAccount | quote }}
      chaosNamespace: {{ .Values.chaosNamespace | quote }}
      dnsDisruption:
        dnsServer: {{ .Values.injector.dnsDisruption.dnsServer | quote }}
        kubeDns: {{ .Values.injector.dnsDisruption.kubeDns | quote }}
      {{- if .Values.injector.networkDisruption.allowedHosts }}
      networkDisruption:
        allowedHosts:
          {{- range $index, $allowedHost := .Values.injector.networkDisruption.allowedHosts }}
          - {{ printf "%s;%v;%s;%s" ($allowedHost.host | default "") ($allowedHost.port | default "") ($allowedHost.protocol | default "") ($allowedHost.flow | default "") | quote }}
          {{- end }}
      {{- end }}
    handler:
      enabled: {{ .Values.handler.enabled }}
      image: {{ .Values.images.handler | quote }}
      timeout: {{ .Values.handler.timeout | quote }}
