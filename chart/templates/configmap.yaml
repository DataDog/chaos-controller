# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2024 Datadog, Inc.
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaos-controller
  namespace: "{{ .Values.chaosNamespace }}"
data:
  config.yaml: |
    controller:
      metricsBindAddr: 127.0.0.1:8080
      leaderElection: {{ .Values.controller.leaderElection }}
      metricsSink: {{ .Values.controller.metricsSink | quote }}
      profilerSink: {{ .Values.controller.profilerSink | quote }}
      tracerSink: {{ .Values.controller.tracerSink | quote }}
      enableSafeguards: {{ .Values.controller.enableSafeguards }}
      enableObserver: {{ .Values.controller.enableObserver }}
      notifiers:
        common:
          clusterName: {{ tpl .Values.controller.notifiers.common.clusterName . }}
        noop:
          enabled: {{ .Values.controller.notifiers.noop.enabled }}
        slack:
          enabled: {{ .Values.controller.notifiers.slack.enabled }}
          tokenFilepath: {{ .Values.controller.notifiers.slack.tokenFilepath | quote }}
          mirrorSlackChannelId: {{ .Values.controller.notifiers.slack.mirrorSlackChannelId | quote }}
        http:
          enabled: {{ .Values.controller.notifiers.http.enabled }}
          url: {{ .Values.controller.notifiers.http.url | quote }}
          headers: {{ .Values.controller.notifiers.http.headers | toJson }}
          headersFilepath: {{ .Values.controller.notifiers.http.headersFilepath | quote }}
        datadog:
          enabled: {{ .Values.controller.notifiers.datadog.enabled }}
      cloudProviders:
        disableAll: {{ .Values.controller.cloudProviders.disableAll }}
        pullInterval: {{ .Values.controller.cloudProviders.pullInterval }}
        aws:
          enabled: {{ .Values.controller.cloudProviders.aws.enabled }}
          ipRangesURL: {{ .Values.controller.cloudProviders.aws.ipRangesURL }}
        gcp:
          enabled: {{ .Values.controller.cloudProviders.gcp.enabled }}
          ipRangesURL: {{ .Values.controller.cloudProviders.gcp.ipRangesURL }}
        datadog:
          enabled: {{ .Values.controller.cloudProviders.datadog.enabled }}
          ipRangesURL: {{ .Values.controller.cloudProviders.datadog.ipRangesURL }}
      deleteOnly: {{ .Values.controller.deleteOnly }}
      defaultDuration: {{ .Values.controller.defaultDuration }}
      {{- if .Values.controller.maxDuration }}
      maxDuration: {{ .Values.controller.maxDuration }}
      {{- end }}
      expiredDisruptionGCDelay: {{ .Values.controller.expiredDisruptionGCDelay }}
      userInfoHook: {{ .Values.controller.userInfoHook }}
      webhook:
        certDir: {{ .Values.controller.webhook.generateCert | ternary "/tmp/k8s-webhook-server/serving-certs" (.Values.controller.webhook.certDir | quote)  }}
        host: {{ .Values.controller.webhook.host | quote }}
        port: {{ .Values.controller.webhook.port }}
      safeMode:
        enable: {{ .Values.controller.safeMode.enable }}
        environment: {{ tpl .Values.controller.safeMode.environment . }}
        namespaceThreshold: {{ .Values.controller.safeMode.namespaceThreshold }}
        clusterThreshold: {{ .Values.controller.safeMode.clusterThreshold }}
      disruptionCronEnabled: {{ .Values.controller.disruptionCronEnabled }}
      disruptionRolloutEnabled: {{ .Values.controller.disruptionRolloutEnabled }}
      disruptionDeletionTimeout: {{ .Values.controller.disruptionDeletionTimeout }}
    injector:
      image: {{ template "chaos-controller.format-image" deepCopy .Values.global.chaos.defaultImage | merge .Values.global.oci | merge .Values.injector.image }}
      imagePullSecrets: {{ .Values.injector.image.pullSecrets }}
      {{- if .Values.injector.annotations }}
      annotations:
        {{- range $key, $val := .Values.injector.annotations }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
      {{- end }}
      {{- if .Values.injector.labels }}
      labels:
        {{- range $key, $val := .Values.injector.labels }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
      {{- end }}
      serviceAccount: {{ .Values.injector.serviceAccount | quote }}
      chaosNamespace: {{ .Values.chaosNamespace | quote }}
      dnsDisruption:
        dnsServer: {{ .Values.injector.dnsDisruption.dnsServer | quote }}
        kubeDns: {{ .Values.injector.dnsDisruption.kubeDns | quote }}
      {{- if .Values.injector.networkDisruption.allowedHosts }}
      networkDisruption:
        hostResolveInterval: {{ .Values.injector.networkDisruption.hostResolveInterval | quote }}
        allowedHosts:
          {{- range $index, $allowedHost := .Values.injector.networkDisruption.allowedHosts }}
          {{ $v := printf "%s;%v;%s;%s" ($allowedHost.host | default "") ($allowedHost.port | default "") ($allowedHost.protocol | default "") ($allowedHost.flow | default "") -}}
          - {{ tpl $v $ }}
          {{- end }}
      {{- end }}
    handler:
      image: {{ template "chaos-controller.format-image" deepCopy .Values.global.chaos.defaultImage | merge .Values.global.oci | merge .Values.handler.image }}
      enabled: {{ .Values.handler.enabled }}
      timeout: {{ .Values.handler.timeout | quote }}
