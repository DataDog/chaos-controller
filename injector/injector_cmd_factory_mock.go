// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package injector

import (
	api "github.com/DataDog/chaos-controller/api"
	command "github.com/DataDog/chaos-controller/command"

	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// InjectorCmdFactoryMock is an autogenerated mock type for the InjectorCmdFactory type
type InjectorCmdFactoryMock struct {
	mock.Mock
}

type InjectorCmdFactoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *InjectorCmdFactoryMock) EXPECT() *InjectorCmdFactoryMock_Expecter {
	return &InjectorCmdFactoryMock_Expecter{mock: &_m.Mock}
}

// NewInjectorBackgroundCmd provides a mock function with given fields: deadline, disruptionArgs, target, args
func (_m *InjectorCmdFactoryMock) NewInjectorBackgroundCmd(deadline time.Time, disruptionArgs api.DisruptionArgs, target string, args []string) (command.BackgroundCmd, context.CancelFunc, error) {
	ret := _m.Called(deadline, disruptionArgs, target, args)

	var r0 command.BackgroundCmd
	var r1 context.CancelFunc
	var r2 error
	if rf, ok := ret.Get(0).(func(time.Time, api.DisruptionArgs, string, []string) (command.BackgroundCmd, context.CancelFunc, error)); ok {
		return rf(deadline, disruptionArgs, target, args)
	}
	if rf, ok := ret.Get(0).(func(time.Time, api.DisruptionArgs, string, []string) command.BackgroundCmd); ok {
		r0 = rf(deadline, disruptionArgs, target, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.BackgroundCmd)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, api.DisruptionArgs, string, []string) context.CancelFunc); ok {
		r1 = rf(deadline, disruptionArgs, target, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}

	if rf, ok := ret.Get(2).(func(time.Time, api.DisruptionArgs, string, []string) error); ok {
		r2 = rf(deadline, disruptionArgs, target, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewInjectorBackgroundCmd'
type InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call struct {
	*mock.Call
}

// NewInjectorBackgroundCmd is a helper method to define mock.On call
//   - deadline time.Time
//   - disruptionArgs api.DisruptionArgs
//   - target string
//   - args []string
func (_e *InjectorCmdFactoryMock_Expecter) NewInjectorBackgroundCmd(deadline interface{}, disruptionArgs interface{}, target interface{}, args interface{}) *InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call {
	return &InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call{Call: _e.mock.On("NewInjectorBackgroundCmd", deadline, disruptionArgs, target, args)}
}

func (_c *InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call) Run(run func(deadline time.Time, disruptionArgs api.DisruptionArgs, target string, args []string)) *InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(api.DisruptionArgs), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call) Return(_a0 command.BackgroundCmd, _a1 context.CancelFunc, _a2 error) *InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call) RunAndReturn(run func(time.Time, api.DisruptionArgs, string, []string) (command.BackgroundCmd, context.CancelFunc, error)) *InjectorCmdFactoryMock_NewInjectorBackgroundCmd_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewInjectorCmdFactoryMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewInjectorCmdFactoryMock creates a new instance of InjectorCmdFactoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInjectorCmdFactoryMock(t mockConstructorTestingTNewInjectorCmdFactoryMock) *InjectorCmdFactoryMock {
	mock := &InjectorCmdFactoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
