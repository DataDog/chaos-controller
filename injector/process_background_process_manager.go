// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package mocks

import (
	process "github.com/DataDog/chaos-controller/process"
	mock "github.com/stretchr/testify/mock"
)

// BackgroundProcessManagerMock is an autogenerated mock type for the BackgroundProcessManager type
type BackgroundProcessManagerMock struct {
	mock.Mock
}

type BackgroundProcessManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BackgroundProcessManagerMock) EXPECT() *BackgroundProcessManagerMock_Expecter {
	return &BackgroundProcessManagerMock_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: targetContainer, args
func (_m *BackgroundProcessManagerMock) Start(targetContainer string, args ...string) (process.BackgroundProcess, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, targetContainer)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 process.BackgroundProcess
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (process.BackgroundProcess, error)); ok {
		return rf(targetContainer, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) process.BackgroundProcess); ok {
		r0 = rf(targetContainer, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(process.BackgroundProcess)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(targetContainer, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BackgroundProcessManagerMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type BackgroundProcessManagerMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - targetContainer string
//   - args ...string
func (_e *BackgroundProcessManagerMock_Expecter) Start(targetContainer interface{}, args ...interface{}) *BackgroundProcessManagerMock_Start_Call {
	return &BackgroundProcessManagerMock_Start_Call{Call: _e.mock.On("Start",
		append([]interface{}{targetContainer}, args...)...)}
}

func (_c *BackgroundProcessManagerMock_Start_Call) Run(run func(targetContainer string, args ...string)) *BackgroundProcessManagerMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *BackgroundProcessManagerMock_Start_Call) Return(_a0 process.BackgroundProcess, _a1 error) *BackgroundProcessManagerMock_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BackgroundProcessManagerMock_Start_Call) RunAndReturn(run func(string, ...string) (process.BackgroundProcess, error)) *BackgroundProcessManagerMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBackgroundProcessManagerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewBackgroundProcessManagerMock creates a new instance of BackgroundProcessManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBackgroundProcessManagerMock(t mockConstructorTestingTNewBackgroundProcessManagerMock) *BackgroundProcessManagerMock {
	mock := &BackgroundProcessManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
