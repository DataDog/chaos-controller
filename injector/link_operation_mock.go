// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package injector

import mock "github.com/stretchr/testify/mock"

// linkOperationMock is an autogenerated mock type for the linkOperation type
type linkOperationMock struct {
	mock.Mock
}

type linkOperationMock_Expecter struct {
	mock *mock.Mock
}

func (_m *linkOperationMock) EXPECT() *linkOperationMock_Expecter {
	return &linkOperationMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *linkOperationMock) Execute(_a0 []string, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// linkOperationMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type linkOperationMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 []string
//   - _a1 string
//   - _a2 string
func (_e *linkOperationMock_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *linkOperationMock_Execute_Call {
	return &linkOperationMock_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *linkOperationMock_Execute_Call) Run(run func(_a0 []string, _a1 string, _a2 string)) *linkOperationMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *linkOperationMock_Execute_Call) Return(_a0 error) *linkOperationMock_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *linkOperationMock_Execute_Call) RunAndReturn(run func([]string, string, string) error) *linkOperationMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newLinkOperationMock creates a new instance of linkOperationMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newLinkOperationMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *linkOperationMock {
	mock := &linkOperationMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
