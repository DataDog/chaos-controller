// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package injector

import mock "github.com/stretchr/testify/mock"

// mockCommand is an autogenerated mock type for the command type
type mockCommand struct {
	mock.Mock
}

type mockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCommand) EXPECT() *mockCommand_Expecter {
	return &mockCommand_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields:
func (_m *mockCommand) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCommand_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type mockCommand_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *mockCommand_Expecter) Start() *mockCommand_Start_Call {
	return &mockCommand_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *mockCommand_Start_Call) Run(run func()) *mockCommand_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCommand_Start_Call) Return(_a0 error) *mockCommand_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

// String provides a mock function with given fields:
func (_m *mockCommand) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockCommand_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type mockCommand_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *mockCommand_Expecter) String() *mockCommand_String_Call {
	return &mockCommand_String_Call{Call: _e.mock.On("String")}
}

func (_c *mockCommand_String_Call) Run(run func()) *mockCommand_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCommand_String_Call) Return(_a0 string) *mockCommand_String_Call {
	_c.Call.Return(_a0)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *mockCommand) Wait() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCommand_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type mockCommand_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *mockCommand_Expecter) Wait() *mockCommand_Wait_Call {
	return &mockCommand_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *mockCommand_Wait_Call) Run(run func()) *mockCommand_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCommand_Wait_Call) Return(_a0 error) *mockCommand_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewMockCommand interface {
	mock.TestingT
	Cleanup(func())
}

// newMockCommand creates a new instance of mockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockCommand(t mockConstructorTestingTnewMockCommand) *mockCommand {
	mock := &mockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
