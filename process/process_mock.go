// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package process

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: pid
func (_m *MockManager) Find(pid int) (*os.Process, error) {
	ret := _m.Called(pid)

	var r0 *os.Process
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*os.Process, error)); ok {
		return rf(pid)
	}
	if rf, ok := ret.Get(0).(func(int) *os.Process); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.Process)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockManager_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - pid int
func (_e *MockManager_Expecter) Find(pid interface{}) *MockManager_Find_Call {
	return &MockManager_Find_Call{Call: _e.mock.On("Find", pid)}
}

func (_c *MockManager_Find_Call) Run(run func(pid int)) *MockManager_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockManager_Find_Call) Return(_a0 *os.Process, _a1 error) *MockManager_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Find_Call) RunAndReturn(run func(int) (*os.Process, error)) *MockManager_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Prioritize provides a mock function with given fields:
func (_m *MockManager) Prioritize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Prioritize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prioritize'
type MockManager_Prioritize_Call struct {
	*mock.Call
}

// Prioritize is a helper method to define mock.On call
func (_e *MockManager_Expecter) Prioritize() *MockManager_Prioritize_Call {
	return &MockManager_Prioritize_Call{Call: _e.mock.On("Prioritize")}
}

func (_c *MockManager_Prioritize_Call) Run(run func()) *MockManager_Prioritize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Prioritize_Call) Return(_a0 error) *MockManager_Prioritize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Prioritize_Call) RunAndReturn(run func() error) *MockManager_Prioritize_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessID provides a mock function with given fields:
func (_m *MockManager) ProcessID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockManager_ProcessID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessID'
type MockManager_ProcessID_Call struct {
	*mock.Call
}

// ProcessID is a helper method to define mock.On call
func (_e *MockManager_Expecter) ProcessID() *MockManager_ProcessID_Call {
	return &MockManager_ProcessID_Call{Call: _e.mock.On("ProcessID")}
}

func (_c *MockManager_ProcessID_Call) Run(run func()) *MockManager_ProcessID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_ProcessID_Call) Return(_a0 int) *MockManager_ProcessID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ProcessID_Call) RunAndReturn(run func() int) *MockManager_ProcessID_Call {
	_c.Call.Return(run)
	return _c
}

// Signal provides a mock function with given fields: process, signal
func (_m *MockManager) Signal(process *os.Process, signal os.Signal) error {
	ret := _m.Called(process, signal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*os.Process, os.Signal) error); ok {
		r0 = rf(process, signal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Signal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signal'
type MockManager_Signal_Call struct {
	*mock.Call
}

// Signal is a helper method to define mock.On call
//   - process *os.Process
//   - signal os.Signal
func (_e *MockManager_Expecter) Signal(process interface{}, signal interface{}) *MockManager_Signal_Call {
	return &MockManager_Signal_Call{Call: _e.mock.On("Signal", process, signal)}
}

func (_c *MockManager_Signal_Call) Run(run func(process *os.Process, signal os.Signal)) *MockManager_Signal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*os.Process), args[1].(os.Signal))
	})
	return _c
}

func (_c *MockManager_Signal_Call) Return(_a0 error) *MockManager_Signal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Signal_Call) RunAndReturn(run func(*os.Process, os.Signal) error) *MockManager_Signal_Call {
	_c.Call.Return(run)
	return _c
}

// ThreadID provides a mock function with given fields:
func (_m *MockManager) ThreadID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockManager_ThreadID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ThreadID'
type MockManager_ThreadID_Call struct {
	*mock.Call
}

// ThreadID is a helper method to define mock.On call
func (_e *MockManager_Expecter) ThreadID() *MockManager_ThreadID_Call {
	return &MockManager_ThreadID_Call{Call: _e.mock.On("ThreadID")}
}

func (_c *MockManager_ThreadID_Call) Run(run func()) *MockManager_ThreadID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_ThreadID_Call) Return(_a0 int) *MockManager_ThreadID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ThreadID_Call) RunAndReturn(run func() int) *MockManager_ThreadID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockManager(t mockConstructorTestingTNewMockManager) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
