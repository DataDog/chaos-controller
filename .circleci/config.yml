version: 2

templates:
  working_directory: &working_directory
    working_directory: /go/src/github.com/DataDog/chaos-fi-controller
  go_job_template: &go_job_template
    <<: *working_directory
    docker:
      # TODO: Publicize the chaos controller ci image to the datadog docker registry
      #- image: datadog/chaos-controller-runner-circle:<< pipeline.parameters.CURRENT_CI_IMAGE >>
      - image: golang:1.13.6-stretch
    environment:
      KUBEBUILDER_VERSION: 1.0.8
      KUBEBUILDER_ARCH: amd64
      GOLANGCI_LINT_VERSION: 1.23.1
      GIT_LFS_SKIP_SMUDGE: 1
  python_job_template: &python_job_template
    <<: *working_directory
    docker:
      - image: python:3.8.1-alpine3.10
  bash_job_template: &bash_job_template
    <<: *working_directory
    docker:
      - image: bash:5.0
  install_go_tools: &install_go_tools
    run:
      name: Install Go tools
      command: |
        cd /usr/local
        curl -L -O "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${KUBEBUILDER_VERSION}/kubebuilder_${KUBEBUILDER_VERSION}_linux_${KUBEBUILDER_ARCH}.tar.gz"
        tar -zxvf kubebuilder_${KUBEBUILDER_VERSION}_linux_${KUBEBUILDER_ARCH}.tar.gz
        mv kubebuilder_${KUBEBUILDER_VERSION}_linux_${KUBEBUILDER_ARCH} kubebuilder
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v${GOLANGCI_LINT_VERSION}
        export PATH="/usr/local/kubebuilder/bin:${PATH}"
        cd $CIRCLE_WORKING_DIRECTORY
  install_python_requirements: &install_python_requirements
    run:
      name: Install Python requirements
      command: |
        pip3 install -r tasks/requirements.txt

jobs:
  build:
    <<: *go_job_template
    steps:
      - checkout
      - *install_go_tools
      - run:
          name: Test and Build
          command: make
  dependencies:
    <<: *go_job_template
    steps:
      - checkout
      - run:
          name: Ensure dependencies are up-to-date
          command: |
            go mod tidy
            git diff --exit-code
  3rd-party-licenses:
    <<: *python_job_template
    steps:
      - checkout
      - *install_python_requirements
      - run:
          name: Ensure 3rd-party licences are up-to-date
          command: |
            python3 tasks/3rdparty.py
  license-header:
    <<: *bash_job_template
    steps:
      - checkout
      - run:
          name: Ensure license header is present
          command: ./tasks/header.sh

workflows:
  version: 2
  test_and_build:
    jobs:
      - build
      - dependencies
      - 3rd-party-licenses
      - license-header
