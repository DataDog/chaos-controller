# Unless explicitly stated otherwise all files in this repository are licensed
# under the Apache License Version 2.0.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2021 Datadog, Inc.

version: 2.1

commands:
  go_save_cache:
    description: "Save $GOHOME directory into the cache for the actual revision"
    steps:
      - save_cache:
          key: env-{{ .Revision }}
          paths:
            - /go
            - /usr/local/bin/golangci-lint
            - /usr/local/kubebuilder
            - /usr/local/bin/helm
  go_restore_cache:
    description: "Restore golang cache"
    steps:
      - restore_cache:
          key: env-{{ .Revision }}
  python_install_requirements:
    description: "Install requirements in requirements.txt using pip"
    steps:
      - run:
          name: Install Python requirements
          command: pip3 install -r tasks/requirements.txt
  alpine_install_git:
    description: "Install git using alpine apk"
    steps:
      - run:
          name: Install git
          command: apk update && apk add git

templates:
  # sets the working directory to the project path
  working_directory: &working_directory
    working_directory: /go/src/github.com/DataDog/chaos-controller

executors:
  golang:
    <<: *working_directory
    docker:
      # TODO: Publicize the chaos controller ci image to the datadog docker registry
      #- image: datadog/chaos-controller-runner-circle:<< pipeline.parameters.CURRENT_CI_IMAGE >>
      - image: golang:1.15-buster
    environment:
      KUBEBUILDER_VERSION: 2.3.1
      KUBEBUILDER_ARCH: amd64
      GOLANGCI_LINT_VERSION: 1.25.1
      HELM_VERSION: 3.5.4
  python:
    <<: *working_directory
    docker:
      - image: python:3.8.1-alpine3.10
  bash:
    <<: *working_directory
    docker:
      - image: bash:5.0
  ubuntu:
    machine:
      image: ubuntu-2004:202107-02

jobs:
  # prepares the CI environment by checking out the code,
  # installing a bunch of tools and downloading modules dependencies
  # into the Go home path so we don't have to do it again in other
  # CI jobs
  prepare-env:
    executor: golang
    steps:
      - checkout
      - run:
          name: Install kubebuilder
          command: |
            cd /usr/local
            curl -L -O "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${KUBEBUILDER_VERSION}/kubebuilder_${KUBEBUILDER_VERSION}_linux_${KUBEBUILDER_ARCH}.tar.gz"
            tar -zxvf kubebuilder_${KUBEBUILDER_VERSION}_linux_${KUBEBUILDER_ARCH}.tar.gz
            mv kubebuilder_${KUBEBUILDER_VERSION}_linux_${KUBEBUILDER_ARCH} kubebuilder
            export PATH="/usr/local/kubebuilder/bin:${PATH}"
      - run:
          name: Install golangci-lint tool
          command: |
            cd /usr/local
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v${GOLANGCI_LINT_VERSION}
      - run:
          name: Install helm
          command: |
            cd /usr/local
            curl -L -O "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz"
            tar -xvzf helm-v${HELM_VERSION}-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
            chmod +x /usr/local/bin/helm
      - run:
          name: Cache local dependencies
          command: go mod download
      - go_save_cache
  # ensures that Go dependencies are up-to-date
  dependencies:
    executor: golang
    steps:
      - go_restore_cache
      - run:
          name: Ensure dependencies are up-to-date
          command: |
            go mod tidy
            git diff --exit-code
  # this will fail if changes in packages are checked into git but the updated manifests are not
  manifests:
    executor: golang
    steps:
      - go_restore_cache
      - run:
          name: Ensure manifests are checked into git
          command: |
            make manifests
            git diff --exit-code
  # vets the code
  vet:
    executor: golang
    steps:
      - go_restore_cache
      - run: make vet
  # formats the code to ensure it complies with Go standards
  fmt:
    executor: golang
    steps:
      - go_restore_cache
      - run: make fmt
  # runs the golangci-lint linters
  lint:
    executor: golang
    steps:
      - go_restore_cache
      - run: make lint
  # runs the tests
  test:
    executor: golang
    steps:
      - go_restore_cache
      - run: make test
  # run e2e tests
  e2e-test:
    executor: ubuntu
    steps:
      - run:
          name: Create missing cache directories
          command: |
            sudo mkdir -p /go /usr/local/bin /usr/local/kubebuilder
            sudo chown circleci:circleci /go /usr/local/bin /usr/local/kubebuilder
      - go_restore_cache
      - run:
          name: Configure Minikube
          command: |
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
            sudo dpkg -i minikube_latest_amd64.deb
            minikube start --vm-driver=docker --container-runtime=containerd --kubernetes-version=v1.19.14
            minikube status
      - run:
          name: Install requirements
          command: minikube kubectl -- apply -f https://github.com/jetstack/cert-manager/releases/download/v1.3.0/cert-manager.yaml
      - run:
          name: Build and load images
          <<: *working_directory
          environment:
            GOBIN: /home/circleci/.go_workspace/bin
          command: make minikube-build
      - run:
          name: Deploy controller chart
          <<: *working_directory
          command: make install
      - run:
          name: Run e2e tests
          <<: *working_directory
          command: make e2e-test
  # ensures that the file containing 3rd-party licenses is up-to-date
  third-party-licenses:
    executor: python
    steps:
      - checkout
      - alpine_install_git
      - python_install_requirements
      - run:
          name: Ensure 3rd-party licenses are up-to-date
          command: inv license-check
      - run: git diff --exit-code
  # ensures that the license header is present on all the needed files
  license-header:
    executor: python
    steps:
      - checkout
      - alpine_install_git
      - python_install_requirements
      - run:
          name: Ensure license header is present
          command: inv header-check

workflows:
  version: 2
  test_and_build:
    jobs:
      - prepare-env
      - dependencies:
          requires:
            - prepare-env
      - manifests:
          requires:
            - prepare-env
      - vet:
          requires:
            - prepare-env
      - fmt:
          requires:
            - prepare-env
      - lint:
          requires:
            - prepare-env
      - test:
          requires:
            - prepare-env
      - e2e-test:
          requires:
            - prepare-env
      - third-party-licenses
      - license-header
