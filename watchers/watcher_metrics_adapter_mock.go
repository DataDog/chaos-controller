// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2025 Datadog, Inc.

package watchers

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"

	v1beta1 "github.com/DataDog/chaos-controller/api/v1beta1"
)

// WatcherMetricsAdapterMock is an autogenerated mock type for the WatcherMetricsAdapter type
type WatcherMetricsAdapterMock struct {
	mock.Mock
}

type WatcherMetricsAdapterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WatcherMetricsAdapterMock) EXPECT() *WatcherMetricsAdapterMock_Expecter {
	return &WatcherMetricsAdapterMock_Expecter{mock: &_m.Mock}
}

// OnChange provides a mock function with given fields: disruption, watcherName, pod, node, okPod, okNode, event
func (_m *WatcherMetricsAdapterMock) OnChange(disruption *v1beta1.Disruption, watcherName string, pod *v1.Pod, node *v1.Node, okPod bool, okNode bool, event WatcherEventType) {
	_m.Called(disruption, watcherName, pod, node, okPod, okNode, event)
}

// WatcherMetricsAdapterMock_OnChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnChange'
type WatcherMetricsAdapterMock_OnChange_Call struct {
	*mock.Call
}

// OnChange is a helper method to define mock.On call
//   - disruption *v1beta1.Disruption
//   - watcherName string
//   - pod *v1.Pod
//   - node *v1.Node
//   - okPod bool
//   - okNode bool
//   - event WatcherEventType
func (_e *WatcherMetricsAdapterMock_Expecter) OnChange(disruption interface{}, watcherName interface{}, pod interface{}, node interface{}, okPod interface{}, okNode interface{}, event interface{}) *WatcherMetricsAdapterMock_OnChange_Call {
	return &WatcherMetricsAdapterMock_OnChange_Call{Call: _e.mock.On("OnChange", disruption, watcherName, pod, node, okPod, okNode, event)}
}

func (_c *WatcherMetricsAdapterMock_OnChange_Call) Run(run func(disruption *v1beta1.Disruption, watcherName string, pod *v1.Pod, node *v1.Node, okPod bool, okNode bool, event WatcherEventType)) *WatcherMetricsAdapterMock_OnChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1beta1.Disruption), args[1].(string), args[2].(*v1.Pod), args[3].(*v1.Node), args[4].(bool), args[5].(bool), args[6].(WatcherEventType))
	})
	return _c
}

func (_c *WatcherMetricsAdapterMock_OnChange_Call) Return() *WatcherMetricsAdapterMock_OnChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *WatcherMetricsAdapterMock_OnChange_Call) RunAndReturn(run func(*v1beta1.Disruption, string, *v1.Pod, *v1.Node, bool, bool, WatcherEventType)) *WatcherMetricsAdapterMock_OnChange_Call {
	_c.Run(run)
	return _c
}

// NewWatcherMetricsAdapterMock creates a new instance of WatcherMetricsAdapterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWatcherMetricsAdapterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WatcherMetricsAdapterMock {
	mock := &WatcherMetricsAdapterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
