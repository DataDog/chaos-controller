// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2024 Datadog, Inc.
package watchers

import mock "github.com/stretchr/testify/mock"

// ManagerMock is an autogenerated mock type for the Manager type
type ManagerMock struct {
	mock.Mock
}

type ManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagerMock) EXPECT() *ManagerMock_Expecter {
	return &ManagerMock_Expecter{mock: &_m.Mock}
}

// AddWatcher provides a mock function with given fields: watcher
func (_m *ManagerMock) AddWatcher(watcher Watcher) error {
	ret := _m.Called(watcher)

	if len(ret) == 0 {
		panic("no return value specified for AddWatcher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Watcher) error); ok {
		r0 = rf(watcher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManagerMock_AddWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWatcher'
type ManagerMock_AddWatcher_Call struct {
	*mock.Call
}

// AddWatcher is a helper method to define mock.On call
//   - watcher Watcher
func (_e *ManagerMock_Expecter) AddWatcher(watcher interface{}) *ManagerMock_AddWatcher_Call {
	return &ManagerMock_AddWatcher_Call{Call: _e.mock.On("AddWatcher", watcher)}
}

func (_c *ManagerMock_AddWatcher_Call) Run(run func(watcher Watcher)) *ManagerMock_AddWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Watcher))
	})
	return _c
}

func (_c *ManagerMock_AddWatcher_Call) Return(_a0 error) *ManagerMock_AddWatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerMock_AddWatcher_Call) RunAndReturn(run func(Watcher) error) *ManagerMock_AddWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// GetWatcher provides a mock function with given fields: name
func (_m *ManagerMock) GetWatcher(name string) Watcher {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetWatcher")
	}

	var r0 Watcher
	if rf, ok := ret.Get(0).(func(string) Watcher); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Watcher)
		}
	}

	return r0
}

// ManagerMock_GetWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWatcher'
type ManagerMock_GetWatcher_Call struct {
	*mock.Call
}

// GetWatcher is a helper method to define mock.On call
//   - name string
func (_e *ManagerMock_Expecter) GetWatcher(name interface{}) *ManagerMock_GetWatcher_Call {
	return &ManagerMock_GetWatcher_Call{Call: _e.mock.On("GetWatcher", name)}
}

func (_c *ManagerMock_GetWatcher_Call) Run(run func(name string)) *ManagerMock_GetWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ManagerMock_GetWatcher_Call) Return(_a0 Watcher) *ManagerMock_GetWatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerMock_GetWatcher_Call) RunAndReturn(run func(string) Watcher) *ManagerMock_GetWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllWatchers provides a mock function with given fields:
func (_m *ManagerMock) RemoveAllWatchers() {
	_m.Called()
}

// ManagerMock_RemoveAllWatchers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllWatchers'
type ManagerMock_RemoveAllWatchers_Call struct {
	*mock.Call
}

// RemoveAllWatchers is a helper method to define mock.On call
func (_e *ManagerMock_Expecter) RemoveAllWatchers() *ManagerMock_RemoveAllWatchers_Call {
	return &ManagerMock_RemoveAllWatchers_Call{Call: _e.mock.On("RemoveAllWatchers")}
}

func (_c *ManagerMock_RemoveAllWatchers_Call) Run(run func()) *ManagerMock_RemoveAllWatchers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ManagerMock_RemoveAllWatchers_Call) Return() *ManagerMock_RemoveAllWatchers_Call {
	_c.Call.Return()
	return _c
}

func (_c *ManagerMock_RemoveAllWatchers_Call) RunAndReturn(run func()) *ManagerMock_RemoveAllWatchers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveExpiredWatchers provides a mock function with given fields:
func (_m *ManagerMock) RemoveExpiredWatchers() {
	_m.Called()
}

// ManagerMock_RemoveExpiredWatchers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveExpiredWatchers'
type ManagerMock_RemoveExpiredWatchers_Call struct {
	*mock.Call
}

// RemoveExpiredWatchers is a helper method to define mock.On call
func (_e *ManagerMock_Expecter) RemoveExpiredWatchers() *ManagerMock_RemoveExpiredWatchers_Call {
	return &ManagerMock_RemoveExpiredWatchers_Call{Call: _e.mock.On("RemoveExpiredWatchers")}
}

func (_c *ManagerMock_RemoveExpiredWatchers_Call) Run(run func()) *ManagerMock_RemoveExpiredWatchers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ManagerMock_RemoveExpiredWatchers_Call) Return() *ManagerMock_RemoveExpiredWatchers_Call {
	_c.Call.Return()
	return _c
}

func (_c *ManagerMock_RemoveExpiredWatchers_Call) RunAndReturn(run func()) *ManagerMock_RemoveExpiredWatchers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOrphanWatchers provides a mock function with given fields:
func (_m *ManagerMock) RemoveOrphanWatchers() {
	_m.Called()
}

// ManagerMock_RemoveOrphanWatchers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOrphanWatchers'
type ManagerMock_RemoveOrphanWatchers_Call struct {
	*mock.Call
}

// RemoveOrphanWatchers is a helper method to define mock.On call
func (_e *ManagerMock_Expecter) RemoveOrphanWatchers() *ManagerMock_RemoveOrphanWatchers_Call {
	return &ManagerMock_RemoveOrphanWatchers_Call{Call: _e.mock.On("RemoveOrphanWatchers")}
}

func (_c *ManagerMock_RemoveOrphanWatchers_Call) Run(run func()) *ManagerMock_RemoveOrphanWatchers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ManagerMock_RemoveOrphanWatchers_Call) Return() *ManagerMock_RemoveOrphanWatchers_Call {
	_c.Call.Return()
	return _c
}

func (_c *ManagerMock_RemoveOrphanWatchers_Call) RunAndReturn(run func()) *ManagerMock_RemoveOrphanWatchers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWatcher provides a mock function with given fields: watcher
func (_m *ManagerMock) RemoveWatcher(watcher Watcher) error {
	ret := _m.Called(watcher)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWatcher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Watcher) error); ok {
		r0 = rf(watcher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManagerMock_RemoveWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWatcher'
type ManagerMock_RemoveWatcher_Call struct {
	*mock.Call
}

// RemoveWatcher is a helper method to define mock.On call
//   - watcher Watcher
func (_e *ManagerMock_Expecter) RemoveWatcher(watcher interface{}) *ManagerMock_RemoveWatcher_Call {
	return &ManagerMock_RemoveWatcher_Call{Call: _e.mock.On("RemoveWatcher", watcher)}
}

func (_c *ManagerMock_RemoveWatcher_Call) Run(run func(watcher Watcher)) *ManagerMock_RemoveWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Watcher))
	})
	return _c
}

func (_c *ManagerMock_RemoveWatcher_Call) Return(_a0 error) *ManagerMock_RemoveWatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerMock_RemoveWatcher_Call) RunAndReturn(run func(Watcher) error) *ManagerMock_RemoveWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// NewManagerMock creates a new instance of ManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerMock {
	mock := &ManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
