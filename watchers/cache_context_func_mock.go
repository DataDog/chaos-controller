// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package watchers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CacheContextFuncMock is an autogenerated mock type for the CacheContextFunc type
type CacheContextFuncMock struct {
	mock.Mock
}

type CacheContextFuncMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheContextFuncMock) EXPECT() *CacheContextFuncMock_Expecter {
	return &CacheContextFuncMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *CacheContextFuncMock) Execute() (context.Context, context.CancelFunc) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 context.Context
	var r1 context.CancelFunc
	if rf, ok := ret.Get(0).(func() (context.Context, context.CancelFunc)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func() context.CancelFunc); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(context.CancelFunc)
		}
	}

	return r0, r1
}

// CacheContextFuncMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CacheContextFuncMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *CacheContextFuncMock_Expecter) Execute() *CacheContextFuncMock_Execute_Call {
	return &CacheContextFuncMock_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *CacheContextFuncMock_Execute_Call) Run(run func()) *CacheContextFuncMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheContextFuncMock_Execute_Call) Return(ctx context.Context, cancel context.CancelFunc) *CacheContextFuncMock_Execute_Call {
	_c.Call.Return(ctx, cancel)
	return _c
}

func (_c *CacheContextFuncMock_Execute_Call) RunAndReturn(run func() (context.Context, context.CancelFunc)) *CacheContextFuncMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheContextFuncMock creates a new instance of CacheContextFuncMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheContextFuncMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheContextFuncMock {
	mock := &CacheContextFuncMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
