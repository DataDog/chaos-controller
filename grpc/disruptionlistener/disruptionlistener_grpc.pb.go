// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package disruptionlistener

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DisruptionListenerClient is the client API for DisruptionListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisruptionListenerClient interface {
	Disrupt(ctx context.Context, in *DisruptionSpec, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetDisruptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type disruptionListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewDisruptionListenerClient(cc grpc.ClientConnInterface) DisruptionListenerClient {
	return &disruptionListenerClient{cc}
}

func (c *disruptionListenerClient) Disrupt(ctx context.Context, in *DisruptionSpec, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/disruptionlistener.DisruptionListener/Disrupt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disruptionListenerClient) ResetDisruptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/disruptionlistener.DisruptionListener/ResetDisruptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisruptionListenerServer is the server API for DisruptionListener service.
// All implementations must embed UnimplementedDisruptionListenerServer
// for forward compatibility
type DisruptionListenerServer interface {
	Disrupt(context.Context, *DisruptionSpec) (*emptypb.Empty, error)
	ResetDisruptions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDisruptionListenerServer()
}

// UnimplementedDisruptionListenerServer must be embedded to have forward compatible implementations.
type UnimplementedDisruptionListenerServer struct {
}

func (UnimplementedDisruptionListenerServer) Disrupt(context.Context, *DisruptionSpec) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disrupt not implemented")
}
func (UnimplementedDisruptionListenerServer) ResetDisruptions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDisruptions not implemented")
}
func (UnimplementedDisruptionListenerServer) mustEmbedUnimplementedDisruptionListenerServer() {}

// UnsafeDisruptionListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisruptionListenerServer will
// result in compilation errors.
type UnsafeDisruptionListenerServer interface {
	mustEmbedUnimplementedDisruptionListenerServer()
}

func RegisterDisruptionListenerServer(s grpc.ServiceRegistrar, srv DisruptionListenerServer) {
	s.RegisterService(&DisruptionListener_ServiceDesc, srv)
}

func _DisruptionListener_Disrupt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisruptionSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisruptionListenerServer).Disrupt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disruptionlistener.DisruptionListener/Disrupt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisruptionListenerServer).Disrupt(ctx, req.(*DisruptionSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _DisruptionListener_ResetDisruptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisruptionListenerServer).ResetDisruptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disruptionlistener.DisruptionListener/ResetDisruptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisruptionListenerServer).ResetDisruptions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DisruptionListener_ServiceDesc is the grpc.ServiceDesc for DisruptionListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisruptionListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "disruptionlistener.DisruptionListener",
	HandlerType: (*DisruptionListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disrupt",
			Handler:    _DisruptionListener_Disrupt_Handler,
		},
		{
			MethodName: "ResetDisruptions",
			Handler:    _DisruptionListener_ResetDisruptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disruptionlistener.proto",
}
