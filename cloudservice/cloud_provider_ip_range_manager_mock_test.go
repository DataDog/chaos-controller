// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package cloudservice

import (
	types "github.com/DataDog/chaos-controller/cloudservice/types"
	mock "github.com/stretchr/testify/mock"
)

// CloudProviderIPRangeManagerMock is an autogenerated mock type for the CloudProviderIPRangeManager type
type CloudProviderIPRangeManagerMock struct {
	mock.Mock
}

type CloudProviderIPRangeManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudProviderIPRangeManagerMock) EXPECT() *CloudProviderIPRangeManagerMock_Expecter {
	return &CloudProviderIPRangeManagerMock_Expecter{mock: &_m.Mock}
}

// ConvertToGenericIPRanges provides a mock function with given fields: _a0
func (_m *CloudProviderIPRangeManagerMock) ConvertToGenericIPRanges(_a0 []byte) (*types.CloudProviderIPRangeInfo, error) {
	ret := _m.Called(_a0)

	var r0 *types.CloudProviderIPRangeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*types.CloudProviderIPRangeInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) *types.CloudProviderIPRangeInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CloudProviderIPRangeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToGenericIPRanges'
type CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call struct {
	*mock.Call
}

// ConvertToGenericIPRanges is a helper method to define mock.On call
//   - _a0 []byte
func (_e *CloudProviderIPRangeManagerMock_Expecter) ConvertToGenericIPRanges(_a0 interface{}) *CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call {
	return &CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call{Call: _e.mock.On("ConvertToGenericIPRanges", _a0)}
}

func (_c *CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call) Run(run func(_a0 []byte)) *CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call) Return(_a0 *types.CloudProviderIPRangeInfo, _a1 error) *CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call) RunAndReturn(run func([]byte) (*types.CloudProviderIPRangeInfo, error)) *CloudProviderIPRangeManagerMock_ConvertToGenericIPRanges_Call {
	_c.Call.Return(run)
	return _c
}

// IsNewVersion provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderIPRangeManagerMock) IsNewVersion(_a0 []byte, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderIPRangeManagerMock_IsNewVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNewVersion'
type CloudProviderIPRangeManagerMock_IsNewVersion_Call struct {
	*mock.Call
}

// IsNewVersion is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 string
func (_e *CloudProviderIPRangeManagerMock_Expecter) IsNewVersion(_a0 interface{}, _a1 interface{}) *CloudProviderIPRangeManagerMock_IsNewVersion_Call {
	return &CloudProviderIPRangeManagerMock_IsNewVersion_Call{Call: _e.mock.On("IsNewVersion", _a0, _a1)}
}

func (_c *CloudProviderIPRangeManagerMock_IsNewVersion_Call) Run(run func(_a0 []byte, _a1 string)) *CloudProviderIPRangeManagerMock_IsNewVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *CloudProviderIPRangeManagerMock_IsNewVersion_Call) Return(_a0 bool, _a1 error) *CloudProviderIPRangeManagerMock_IsNewVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderIPRangeManagerMock_IsNewVersion_Call) RunAndReturn(run func([]byte, string) (bool, error)) *CloudProviderIPRangeManagerMock_IsNewVersion_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCloudProviderIPRangeManagerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloudProviderIPRangeManagerMock creates a new instance of CloudProviderIPRangeManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloudProviderIPRangeManagerMock(t mockConstructorTestingTNewCloudProviderIPRangeManagerMock) *CloudProviderIPRangeManagerMock {
	mock := &CloudProviderIPRangeManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
