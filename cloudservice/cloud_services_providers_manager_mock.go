// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2025 Datadog, Inc.

package cloudservice

import (
	context "context"

	types "github.com/DataDog/chaos-controller/cloudservice/types"
	mock "github.com/stretchr/testify/mock"
)

// CloudServicesProvidersManagerMock is an autogenerated mock type for the CloudServicesProvidersManager type
type CloudServicesProvidersManagerMock struct {
	mock.Mock
}

type CloudServicesProvidersManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudServicesProvidersManagerMock) EXPECT() *CloudServicesProvidersManagerMock_Expecter {
	return &CloudServicesProvidersManagerMock_Expecter{mock: &_m.Mock}
}

// GetProviderByName provides a mock function with given fields: name
func (_m *CloudServicesProvidersManagerMock) GetProviderByName(name types.CloudProviderName) *CloudServicesProvider {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByName")
	}

	var r0 *CloudServicesProvider
	if rf, ok := ret.Get(0).(func(types.CloudProviderName) *CloudServicesProvider); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CloudServicesProvider)
		}
	}

	return r0
}

// CloudServicesProvidersManagerMock_GetProviderByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderByName'
type CloudServicesProvidersManagerMock_GetProviderByName_Call struct {
	*mock.Call
}

// GetProviderByName is a helper method to define mock.On call
//   - name types.CloudProviderName
func (_e *CloudServicesProvidersManagerMock_Expecter) GetProviderByName(name interface{}) *CloudServicesProvidersManagerMock_GetProviderByName_Call {
	return &CloudServicesProvidersManagerMock_GetProviderByName_Call{Call: _e.mock.On("GetProviderByName", name)}
}

func (_c *CloudServicesProvidersManagerMock_GetProviderByName_Call) Run(run func(name types.CloudProviderName)) *CloudServicesProvidersManagerMock_GetProviderByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.CloudProviderName))
	})
	return _c
}

func (_c *CloudServicesProvidersManagerMock_GetProviderByName_Call) Return(_a0 *CloudServicesProvider) *CloudServicesProvidersManagerMock_GetProviderByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudServicesProvidersManagerMock_GetProviderByName_Call) RunAndReturn(run func(types.CloudProviderName) *CloudServicesProvider) *CloudServicesProvidersManagerMock_GetProviderByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceList provides a mock function with given fields: ctx, cloudProviderName
func (_m *CloudServicesProvidersManagerMock) GetServiceList(ctx context.Context, cloudProviderName types.CloudProviderName) []string {
	ret := _m.Called(ctx, cloudProviderName)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceList")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, types.CloudProviderName) []string); ok {
		r0 = rf(ctx, cloudProviderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// CloudServicesProvidersManagerMock_GetServiceList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceList'
type CloudServicesProvidersManagerMock_GetServiceList_Call struct {
	*mock.Call
}

// GetServiceList is a helper method to define mock.On call
//   - ctx context.Context
//   - cloudProviderName types.CloudProviderName
func (_e *CloudServicesProvidersManagerMock_Expecter) GetServiceList(ctx interface{}, cloudProviderName interface{}) *CloudServicesProvidersManagerMock_GetServiceList_Call {
	return &CloudServicesProvidersManagerMock_GetServiceList_Call{Call: _e.mock.On("GetServiceList", ctx, cloudProviderName)}
}

func (_c *CloudServicesProvidersManagerMock_GetServiceList_Call) Run(run func(ctx context.Context, cloudProviderName types.CloudProviderName)) *CloudServicesProvidersManagerMock_GetServiceList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CloudProviderName))
	})
	return _c
}

func (_c *CloudServicesProvidersManagerMock_GetServiceList_Call) Return(_a0 []string) *CloudServicesProvidersManagerMock_GetServiceList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudServicesProvidersManagerMock_GetServiceList_Call) RunAndReturn(run func(context.Context, types.CloudProviderName) []string) *CloudServicesProvidersManagerMock_GetServiceList_Call {
	_c.Call.Return(run)
	return _c
}

// GetServicesIPRanges provides a mock function with given fields: ctx, cloudProviderName, serviceNames
func (_m *CloudServicesProvidersManagerMock) GetServicesIPRanges(ctx context.Context, cloudProviderName types.CloudProviderName, serviceNames []string) (map[string][]string, error) {
	ret := _m.Called(ctx, cloudProviderName, serviceNames)

	if len(ret) == 0 {
		panic("no return value specified for GetServicesIPRanges")
	}

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CloudProviderName, []string) (map[string][]string, error)); ok {
		return rf(ctx, cloudProviderName, serviceNames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CloudProviderName, []string) map[string][]string); ok {
		r0 = rf(ctx, cloudProviderName, serviceNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CloudProviderName, []string) error); ok {
		r1 = rf(ctx, cloudProviderName, serviceNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServicesProvidersManagerMock_GetServicesIPRanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServicesIPRanges'
type CloudServicesProvidersManagerMock_GetServicesIPRanges_Call struct {
	*mock.Call
}

// GetServicesIPRanges is a helper method to define mock.On call
//   - ctx context.Context
//   - cloudProviderName types.CloudProviderName
//   - serviceNames []string
func (_e *CloudServicesProvidersManagerMock_Expecter) GetServicesIPRanges(ctx interface{}, cloudProviderName interface{}, serviceNames interface{}) *CloudServicesProvidersManagerMock_GetServicesIPRanges_Call {
	return &CloudServicesProvidersManagerMock_GetServicesIPRanges_Call{Call: _e.mock.On("GetServicesIPRanges", ctx, cloudProviderName, serviceNames)}
}

func (_c *CloudServicesProvidersManagerMock_GetServicesIPRanges_Call) Run(run func(ctx context.Context, cloudProviderName types.CloudProviderName, serviceNames []string)) *CloudServicesProvidersManagerMock_GetServicesIPRanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CloudProviderName), args[2].([]string))
	})
	return _c
}

func (_c *CloudServicesProvidersManagerMock_GetServicesIPRanges_Call) Return(_a0 map[string][]string, _a1 error) *CloudServicesProvidersManagerMock_GetServicesIPRanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServicesProvidersManagerMock_GetServicesIPRanges_Call) RunAndReturn(run func(context.Context, types.CloudProviderName, []string) (map[string][]string, error)) *CloudServicesProvidersManagerMock_GetServicesIPRanges_Call {
	_c.Call.Return(run)
	return _c
}

// PullIPRanges provides a mock function with given fields: ctx
func (_m *CloudServicesProvidersManagerMock) PullIPRanges(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PullIPRanges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloudServicesProvidersManagerMock_PullIPRanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullIPRanges'
type CloudServicesProvidersManagerMock_PullIPRanges_Call struct {
	*mock.Call
}

// PullIPRanges is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CloudServicesProvidersManagerMock_Expecter) PullIPRanges(ctx interface{}) *CloudServicesProvidersManagerMock_PullIPRanges_Call {
	return &CloudServicesProvidersManagerMock_PullIPRanges_Call{Call: _e.mock.On("PullIPRanges", ctx)}
}

func (_c *CloudServicesProvidersManagerMock_PullIPRanges_Call) Run(run func(ctx context.Context)) *CloudServicesProvidersManagerMock_PullIPRanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CloudServicesProvidersManagerMock_PullIPRanges_Call) Return(_a0 error) *CloudServicesProvidersManagerMock_PullIPRanges_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudServicesProvidersManagerMock_PullIPRanges_Call) RunAndReturn(run func(context.Context) error) *CloudServicesProvidersManagerMock_PullIPRanges_Call {
	_c.Call.Return(run)
	return _c
}

// StartPeriodicPull provides a mock function with given fields: ctx
func (_m *CloudServicesProvidersManagerMock) StartPeriodicPull(ctx context.Context) {
	_m.Called(ctx)
}

// CloudServicesProvidersManagerMock_StartPeriodicPull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartPeriodicPull'
type CloudServicesProvidersManagerMock_StartPeriodicPull_Call struct {
	*mock.Call
}

// StartPeriodicPull is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CloudServicesProvidersManagerMock_Expecter) StartPeriodicPull(ctx interface{}) *CloudServicesProvidersManagerMock_StartPeriodicPull_Call {
	return &CloudServicesProvidersManagerMock_StartPeriodicPull_Call{Call: _e.mock.On("StartPeriodicPull", ctx)}
}

func (_c *CloudServicesProvidersManagerMock_StartPeriodicPull_Call) Run(run func(ctx context.Context)) *CloudServicesProvidersManagerMock_StartPeriodicPull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CloudServicesProvidersManagerMock_StartPeriodicPull_Call) Return() *CloudServicesProvidersManagerMock_StartPeriodicPull_Call {
	_c.Call.Return()
	return _c
}

func (_c *CloudServicesProvidersManagerMock_StartPeriodicPull_Call) RunAndReturn(run func(context.Context)) *CloudServicesProvidersManagerMock_StartPeriodicPull_Call {
	_c.Run(run)
	return _c
}

// StopPeriodicPull provides a mock function with given fields: ctx
func (_m *CloudServicesProvidersManagerMock) StopPeriodicPull(ctx context.Context) {
	_m.Called(ctx)
}

// CloudServicesProvidersManagerMock_StopPeriodicPull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopPeriodicPull'
type CloudServicesProvidersManagerMock_StopPeriodicPull_Call struct {
	*mock.Call
}

// StopPeriodicPull is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CloudServicesProvidersManagerMock_Expecter) StopPeriodicPull(ctx interface{}) *CloudServicesProvidersManagerMock_StopPeriodicPull_Call {
	return &CloudServicesProvidersManagerMock_StopPeriodicPull_Call{Call: _e.mock.On("StopPeriodicPull", ctx)}
}

func (_c *CloudServicesProvidersManagerMock_StopPeriodicPull_Call) Run(run func(ctx context.Context)) *CloudServicesProvidersManagerMock_StopPeriodicPull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CloudServicesProvidersManagerMock_StopPeriodicPull_Call) Return() *CloudServicesProvidersManagerMock_StopPeriodicPull_Call {
	_c.Call.Return()
	return _c
}

func (_c *CloudServicesProvidersManagerMock_StopPeriodicPull_Call) RunAndReturn(run func(context.Context)) *CloudServicesProvidersManagerMock_StopPeriodicPull_Call {
	_c.Run(run)
	return _c
}

// NewCloudServicesProvidersManagerMock creates a new instance of CloudServicesProvidersManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudServicesProvidersManagerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudServicesProvidersManagerMock {
	mock := &CloudServicesProvidersManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
