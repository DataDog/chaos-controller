// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package profiler

import mock "github.com/stretchr/testify/mock"

// SinkMock is an autogenerated mock type for the Sink type
type SinkMock struct {
	mock.Mock
}

type SinkMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SinkMock) EXPECT() *SinkMock_Expecter {
	return &SinkMock_Expecter{mock: &_m.Mock}
}

// GetSinkName provides a mock function with given fields:
func (_m *SinkMock) GetSinkName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSinkName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SinkMock_GetSinkName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSinkName'
type SinkMock_GetSinkName_Call struct {
	*mock.Call
}

// GetSinkName is a helper method to define mock.On call
func (_e *SinkMock_Expecter) GetSinkName() *SinkMock_GetSinkName_Call {
	return &SinkMock_GetSinkName_Call{Call: _e.mock.On("GetSinkName")}
}

func (_c *SinkMock_GetSinkName_Call) Run(run func()) *SinkMock_GetSinkName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SinkMock_GetSinkName_Call) Return(_a0 string) *SinkMock_GetSinkName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SinkMock_GetSinkName_Call) RunAndReturn(run func() string) *SinkMock_GetSinkName_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *SinkMock) Stop() {
	_m.Called()
}

// SinkMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type SinkMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *SinkMock_Expecter) Stop() *SinkMock_Stop_Call {
	return &SinkMock_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *SinkMock_Stop_Call) Run(run func()) *SinkMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SinkMock_Stop_Call) Return() *SinkMock_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *SinkMock_Stop_Call) RunAndReturn(run func()) *SinkMock_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewSinkMock creates a new instance of SinkMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSinkMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SinkMock {
	mock := &SinkMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
