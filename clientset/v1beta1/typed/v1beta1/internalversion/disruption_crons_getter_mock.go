// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2025 Datadog, Inc.

package internalversion

import mock "github.com/stretchr/testify/mock"

// DisruptionCronsGetterMock is an autogenerated mock type for the DisruptionCronsGetter type
type DisruptionCronsGetterMock struct {
	mock.Mock
}

type DisruptionCronsGetterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DisruptionCronsGetterMock) EXPECT() *DisruptionCronsGetterMock_Expecter {
	return &DisruptionCronsGetterMock_Expecter{mock: &_m.Mock}
}

// DisruptionCrons provides a mock function with given fields: namespace
func (_m *DisruptionCronsGetterMock) DisruptionCrons(namespace string) DisruptionCronInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for DisruptionCrons")
	}

	var r0 DisruptionCronInterface
	if rf, ok := ret.Get(0).(func(string) DisruptionCronInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DisruptionCronInterface)
		}
	}

	return r0
}

// DisruptionCronsGetterMock_DisruptionCrons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisruptionCrons'
type DisruptionCronsGetterMock_DisruptionCrons_Call struct {
	*mock.Call
}

// DisruptionCrons is a helper method to define mock.On call
//   - namespace string
func (_e *DisruptionCronsGetterMock_Expecter) DisruptionCrons(namespace interface{}) *DisruptionCronsGetterMock_DisruptionCrons_Call {
	return &DisruptionCronsGetterMock_DisruptionCrons_Call{Call: _e.mock.On("DisruptionCrons", namespace)}
}

func (_c *DisruptionCronsGetterMock_DisruptionCrons_Call) Run(run func(namespace string)) *DisruptionCronsGetterMock_DisruptionCrons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DisruptionCronsGetterMock_DisruptionCrons_Call) Return(_a0 DisruptionCronInterface) *DisruptionCronsGetterMock_DisruptionCrons_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DisruptionCronsGetterMock_DisruptionCrons_Call) RunAndReturn(run func(string) DisruptionCronInterface) *DisruptionCronsGetterMock_DisruptionCrons_Call {
	_c.Call.Return(run)
	return _c
}

// NewDisruptionCronsGetterMock creates a new instance of DisruptionCronsGetterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisruptionCronsGetterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisruptionCronsGetterMock {
	mock := &DisruptionCronsGetterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
