// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package network

import mock "github.com/stretchr/testify/mock"

// MockIptables is an autogenerated mock type for the Iptables type
type MockIptables struct {
	mock.Mock
}

type MockIptables_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIptables) EXPECT() *MockIptables_Expecter {
	return &MockIptables_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields:
func (_m *MockIptables) Clear() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIptables_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockIptables_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockIptables_Expecter) Clear() *MockIptables_Clear_Call {
	return &MockIptables_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockIptables_Clear_Call) Run(run func()) *MockIptables_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIptables_Clear_Call) Return(_a0 error) *MockIptables_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIptables_Clear_Call) RunAndReturn(run func() error) *MockIptables_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Intercept provides a mock function with given fields: protocol, port, cgroupPath, cgroupClassID, injectorPodIP
func (_m *MockIptables) Intercept(protocol string, port string, cgroupPath string, cgroupClassID string, injectorPodIP string) error {
	ret := _m.Called(protocol, port, cgroupPath, cgroupClassID, injectorPodIP)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(protocol, port, cgroupPath, cgroupClassID, injectorPodIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIptables_Intercept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Intercept'
type MockIptables_Intercept_Call struct {
	*mock.Call
}

// Intercept is a helper method to define mock.On call
//   - protocol string
//   - port string
//   - cgroupPath string
//   - cgroupClassID string
//   - injectorPodIP string
func (_e *MockIptables_Expecter) Intercept(protocol interface{}, port interface{}, cgroupPath interface{}, cgroupClassID interface{}, injectorPodIP interface{}) *MockIptables_Intercept_Call {
	return &MockIptables_Intercept_Call{Call: _e.mock.On("Intercept", protocol, port, cgroupPath, cgroupClassID, injectorPodIP)}
}

func (_c *MockIptables_Intercept_Call) Run(run func(protocol string, port string, cgroupPath string, cgroupClassID string, injectorPodIP string)) *MockIptables_Intercept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockIptables_Intercept_Call) Return(_a0 error) *MockIptables_Intercept_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIptables_Intercept_Call) RunAndReturn(run func(string, string, string, string, string) error) *MockIptables_Intercept_Call {
	_c.Call.Return(run)
	return _c
}

// LogConntrack provides a mock function with given fields:
func (_m *MockIptables) LogConntrack() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIptables_LogConntrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogConntrack'
type MockIptables_LogConntrack_Call struct {
	*mock.Call
}

// LogConntrack is a helper method to define mock.On call
func (_e *MockIptables_Expecter) LogConntrack() *MockIptables_LogConntrack_Call {
	return &MockIptables_LogConntrack_Call{Call: _e.mock.On("LogConntrack")}
}

func (_c *MockIptables_LogConntrack_Call) Run(run func()) *MockIptables_LogConntrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIptables_LogConntrack_Call) Return(_a0 error) *MockIptables_LogConntrack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIptables_LogConntrack_Call) RunAndReturn(run func() error) *MockIptables_LogConntrack_Call {
	_c.Call.Return(run)
	return _c
}

// MarkCgroupPath provides a mock function with given fields: cgroupPath, mark
func (_m *MockIptables) MarkCgroupPath(cgroupPath string, mark string) error {
	ret := _m.Called(cgroupPath, mark)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(cgroupPath, mark)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIptables_MarkCgroupPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkCgroupPath'
type MockIptables_MarkCgroupPath_Call struct {
	*mock.Call
}

// MarkCgroupPath is a helper method to define mock.On call
//   - cgroupPath string
//   - mark string
func (_e *MockIptables_Expecter) MarkCgroupPath(cgroupPath interface{}, mark interface{}) *MockIptables_MarkCgroupPath_Call {
	return &MockIptables_MarkCgroupPath_Call{Call: _e.mock.On("MarkCgroupPath", cgroupPath, mark)}
}

func (_c *MockIptables_MarkCgroupPath_Call) Run(run func(cgroupPath string, mark string)) *MockIptables_MarkCgroupPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIptables_MarkCgroupPath_Call) Return(_a0 error) *MockIptables_MarkCgroupPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIptables_MarkCgroupPath_Call) RunAndReturn(run func(string, string) error) *MockIptables_MarkCgroupPath_Call {
	_c.Call.Return(run)
	return _c
}

// MarkClassID provides a mock function with given fields: classid, mark
func (_m *MockIptables) MarkClassID(classid string, mark string) error {
	ret := _m.Called(classid, mark)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(classid, mark)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIptables_MarkClassID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkClassID'
type MockIptables_MarkClassID_Call struct {
	*mock.Call
}

// MarkClassID is a helper method to define mock.On call
//   - classid string
//   - mark string
func (_e *MockIptables_Expecter) MarkClassID(classid interface{}, mark interface{}) *MockIptables_MarkClassID_Call {
	return &MockIptables_MarkClassID_Call{Call: _e.mock.On("MarkClassID", classid, mark)}
}

func (_c *MockIptables_MarkClassID_Call) Run(run func(classid string, mark string)) *MockIptables_MarkClassID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIptables_MarkClassID_Call) Return(_a0 error) *MockIptables_MarkClassID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIptables_MarkClassID_Call) RunAndReturn(run func(string, string) error) *MockIptables_MarkClassID_Call {
	_c.Call.Return(run)
	return _c
}

// RedirectTo provides a mock function with given fields: protocol, port, destinationIP
func (_m *MockIptables) RedirectTo(protocol string, port string, destinationIP string) error {
	ret := _m.Called(protocol, port, destinationIP)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(protocol, port, destinationIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIptables_RedirectTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectTo'
type MockIptables_RedirectTo_Call struct {
	*mock.Call
}

// RedirectTo is a helper method to define mock.On call
//   - protocol string
//   - port string
//   - destinationIP string
func (_e *MockIptables_Expecter) RedirectTo(protocol interface{}, port interface{}, destinationIP interface{}) *MockIptables_RedirectTo_Call {
	return &MockIptables_RedirectTo_Call{Call: _e.mock.On("RedirectTo", protocol, port, destinationIP)}
}

func (_c *MockIptables_RedirectTo_Call) Run(run func(protocol string, port string, destinationIP string)) *MockIptables_RedirectTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIptables_RedirectTo_Call) Return(_a0 error) *MockIptables_RedirectTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIptables_RedirectTo_Call) RunAndReturn(run func(string, string, string) error) *MockIptables_RedirectTo_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockIptables interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIptables creates a new instance of MockIptables. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIptables(t mockConstructorTestingTNewMockIptables) *MockIptables {
	mock := &MockIptables{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
