// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package network

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TrafficControllerMock is an autogenerated mock type for the TrafficController type
type TrafficControllerMock struct {
	mock.Mock
}

type TrafficControllerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TrafficControllerMock) EXPECT() *TrafficControllerMock_Expecter {
	return &TrafficControllerMock_Expecter{mock: &_m.Mock}
}

// AddFilter provides a mock function with given fields: ifaces, parent, handle, srcIP, dstIP, srcPort, dstPort, prot, state, flowid
func (_m *TrafficControllerMock) AddFilter(ifaces []string, parent string, handle string, srcIP *net.IPNet, dstIP *net.IPNet, srcPort int, dstPort int, prot protocol, state connState, flowid string) (uint32, error) {
	ret := _m.Called(ifaces, parent, handle, srcIP, dstIP, srcPort, dstPort, prot, state, flowid)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string, string, *net.IPNet, *net.IPNet, int, int, protocol, connState, string) (uint32, error)); ok {
		return rf(ifaces, parent, handle, srcIP, dstIP, srcPort, dstPort, prot, state, flowid)
	}
	if rf, ok := ret.Get(0).(func([]string, string, string, *net.IPNet, *net.IPNet, int, int, protocol, connState, string) uint32); ok {
		r0 = rf(ifaces, parent, handle, srcIP, dstIP, srcPort, dstPort, prot, state, flowid)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func([]string, string, string, *net.IPNet, *net.IPNet, int, int, protocol, connState, string) error); ok {
		r1 = rf(ifaces, parent, handle, srcIP, dstIP, srcPort, dstPort, prot, state, flowid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrafficControllerMock_AddFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFilter'
type TrafficControllerMock_AddFilter_Call struct {
	*mock.Call
}

// AddFilter is a helper method to define mock.On call
//   - ifaces []string
//   - parent string
//   - handle string
//   - srcIP *net.IPNet
//   - dstIP *net.IPNet
//   - srcPort int
//   - dstPort int
//   - prot protocol
//   - state connState
//   - flowid string
func (_e *TrafficControllerMock_Expecter) AddFilter(ifaces interface{}, parent interface{}, handle interface{}, srcIP interface{}, dstIP interface{}, srcPort interface{}, dstPort interface{}, prot interface{}, state interface{}, flowid interface{}) *TrafficControllerMock_AddFilter_Call {
	return &TrafficControllerMock_AddFilter_Call{Call: _e.mock.On("AddFilter", ifaces, parent, handle, srcIP, dstIP, srcPort, dstPort, prot, state, flowid)}
}

func (_c *TrafficControllerMock_AddFilter_Call) Run(run func(ifaces []string, parent string, handle string, srcIP *net.IPNet, dstIP *net.IPNet, srcPort int, dstPort int, prot protocol, state connState, flowid string)) *TrafficControllerMock_AddFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string), args[3].(*net.IPNet), args[4].(*net.IPNet), args[5].(int), args[6].(int), args[7].(protocol), args[8].(connState), args[9].(string))
	})
	return _c
}

func (_c *TrafficControllerMock_AddFilter_Call) Return(_a0 uint32, _a1 error) *TrafficControllerMock_AddFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrafficControllerMock_AddFilter_Call) RunAndReturn(run func([]string, string, string, *net.IPNet, *net.IPNet, int, int, protocol, connState, string) (uint32, error)) *TrafficControllerMock_AddFilter_Call {
	_c.Call.Return(run)
	return _c
}

// AddFwFilter provides a mock function with given fields: ifaces, parent, handle, flowid
func (_m *TrafficControllerMock) AddFwFilter(ifaces []string, parent string, handle string, flowid string) error {
	ret := _m.Called(ifaces, parent, handle, flowid)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string, string) error); ok {
		r0 = rf(ifaces, parent, handle, flowid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrafficControllerMock_AddFwFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFwFilter'
type TrafficControllerMock_AddFwFilter_Call struct {
	*mock.Call
}

// AddFwFilter is a helper method to define mock.On call
//   - ifaces []string
//   - parent string
//   - handle string
//   - flowid string
func (_e *TrafficControllerMock_Expecter) AddFwFilter(ifaces interface{}, parent interface{}, handle interface{}, flowid interface{}) *TrafficControllerMock_AddFwFilter_Call {
	return &TrafficControllerMock_AddFwFilter_Call{Call: _e.mock.On("AddFwFilter", ifaces, parent, handle, flowid)}
}

func (_c *TrafficControllerMock_AddFwFilter_Call) Run(run func(ifaces []string, parent string, handle string, flowid string)) *TrafficControllerMock_AddFwFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TrafficControllerMock_AddFwFilter_Call) Return(_a0 error) *TrafficControllerMock_AddFwFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrafficControllerMock_AddFwFilter_Call) RunAndReturn(run func([]string, string, string, string) error) *TrafficControllerMock_AddFwFilter_Call {
	_c.Call.Return(run)
	return _c
}

// AddNetem provides a mock function with given fields: ifaces, parent, handle, delay, delayJitter, drop, corrupt, duplicate
func (_m *TrafficControllerMock) AddNetem(ifaces []string, parent string, handle string, delay time.Duration, delayJitter time.Duration, drop int, corrupt int, duplicate int) error {
	ret := _m.Called(ifaces, parent, handle, delay, delayJitter, drop, corrupt, duplicate)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string, time.Duration, time.Duration, int, int, int) error); ok {
		r0 = rf(ifaces, parent, handle, delay, delayJitter, drop, corrupt, duplicate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrafficControllerMock_AddNetem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNetem'
type TrafficControllerMock_AddNetem_Call struct {
	*mock.Call
}

// AddNetem is a helper method to define mock.On call
//   - ifaces []string
//   - parent string
//   - handle string
//   - delay time.Duration
//   - delayJitter time.Duration
//   - drop int
//   - corrupt int
//   - duplicate int
func (_e *TrafficControllerMock_Expecter) AddNetem(ifaces interface{}, parent interface{}, handle interface{}, delay interface{}, delayJitter interface{}, drop interface{}, corrupt interface{}, duplicate interface{}) *TrafficControllerMock_AddNetem_Call {
	return &TrafficControllerMock_AddNetem_Call{Call: _e.mock.On("AddNetem", ifaces, parent, handle, delay, delayJitter, drop, corrupt, duplicate)}
}

func (_c *TrafficControllerMock_AddNetem_Call) Run(run func(ifaces []string, parent string, handle string, delay time.Duration, delayJitter time.Duration, drop int, corrupt int, duplicate int)) *TrafficControllerMock_AddNetem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string), args[3].(time.Duration), args[4].(time.Duration), args[5].(int), args[6].(int), args[7].(int))
	})
	return _c
}

func (_c *TrafficControllerMock_AddNetem_Call) Return(_a0 error) *TrafficControllerMock_AddNetem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrafficControllerMock_AddNetem_Call) RunAndReturn(run func([]string, string, string, time.Duration, time.Duration, int, int, int) error) *TrafficControllerMock_AddNetem_Call {
	_c.Call.Return(run)
	return _c
}

// AddOutputLimit provides a mock function with given fields: ifaces, parent, handle, bytesPerSec
func (_m *TrafficControllerMock) AddOutputLimit(ifaces []string, parent string, handle string, bytesPerSec uint) error {
	ret := _m.Called(ifaces, parent, handle, bytesPerSec)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string, uint) error); ok {
		r0 = rf(ifaces, parent, handle, bytesPerSec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrafficControllerMock_AddOutputLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOutputLimit'
type TrafficControllerMock_AddOutputLimit_Call struct {
	*mock.Call
}

// AddOutputLimit is a helper method to define mock.On call
//   - ifaces []string
//   - parent string
//   - handle string
//   - bytesPerSec uint
func (_e *TrafficControllerMock_Expecter) AddOutputLimit(ifaces interface{}, parent interface{}, handle interface{}, bytesPerSec interface{}) *TrafficControllerMock_AddOutputLimit_Call {
	return &TrafficControllerMock_AddOutputLimit_Call{Call: _e.mock.On("AddOutputLimit", ifaces, parent, handle, bytesPerSec)}
}

func (_c *TrafficControllerMock_AddOutputLimit_Call) Run(run func(ifaces []string, parent string, handle string, bytesPerSec uint)) *TrafficControllerMock_AddOutputLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string), args[3].(uint))
	})
	return _c
}

func (_c *TrafficControllerMock_AddOutputLimit_Call) Return(_a0 error) *TrafficControllerMock_AddOutputLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrafficControllerMock_AddOutputLimit_Call) RunAndReturn(run func([]string, string, string, uint) error) *TrafficControllerMock_AddOutputLimit_Call {
	_c.Call.Return(run)
	return _c
}

// AddPrio provides a mock function with given fields: ifaces, parent, handle, bands, priomap
func (_m *TrafficControllerMock) AddPrio(ifaces []string, parent string, handle string, bands uint32, priomap [16]uint32) error {
	ret := _m.Called(ifaces, parent, handle, bands, priomap)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string, uint32, [16]uint32) error); ok {
		r0 = rf(ifaces, parent, handle, bands, priomap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrafficControllerMock_AddPrio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPrio'
type TrafficControllerMock_AddPrio_Call struct {
	*mock.Call
}

// AddPrio is a helper method to define mock.On call
//   - ifaces []string
//   - parent string
//   - handle string
//   - bands uint32
//   - priomap [16]uint32
func (_e *TrafficControllerMock_Expecter) AddPrio(ifaces interface{}, parent interface{}, handle interface{}, bands interface{}, priomap interface{}) *TrafficControllerMock_AddPrio_Call {
	return &TrafficControllerMock_AddPrio_Call{Call: _e.mock.On("AddPrio", ifaces, parent, handle, bands, priomap)}
}

func (_c *TrafficControllerMock_AddPrio_Call) Run(run func(ifaces []string, parent string, handle string, bands uint32, priomap [16]uint32)) *TrafficControllerMock_AddPrio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string), args[3].(uint32), args[4].([16]uint32))
	})
	return _c
}

func (_c *TrafficControllerMock_AddPrio_Call) Return(_a0 error) *TrafficControllerMock_AddPrio_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrafficControllerMock_AddPrio_Call) RunAndReturn(run func([]string, string, string, uint32, [16]uint32) error) *TrafficControllerMock_AddPrio_Call {
	_c.Call.Return(run)
	return _c
}

// ClearQdisc provides a mock function with given fields: ifaces
func (_m *TrafficControllerMock) ClearQdisc(ifaces []string) error {
	ret := _m.Called(ifaces)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ifaces)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrafficControllerMock_ClearQdisc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearQdisc'
type TrafficControllerMock_ClearQdisc_Call struct {
	*mock.Call
}

// ClearQdisc is a helper method to define mock.On call
//   - ifaces []string
func (_e *TrafficControllerMock_Expecter) ClearQdisc(ifaces interface{}) *TrafficControllerMock_ClearQdisc_Call {
	return &TrafficControllerMock_ClearQdisc_Call{Call: _e.mock.On("ClearQdisc", ifaces)}
}

func (_c *TrafficControllerMock_ClearQdisc_Call) Run(run func(ifaces []string)) *TrafficControllerMock_ClearQdisc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *TrafficControllerMock_ClearQdisc_Call) Return(_a0 error) *TrafficControllerMock_ClearQdisc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrafficControllerMock_ClearQdisc_Call) RunAndReturn(run func([]string) error) *TrafficControllerMock_ClearQdisc_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFilter provides a mock function with given fields: iface, priority
func (_m *TrafficControllerMock) DeleteFilter(iface string, priority uint32) error {
	ret := _m.Called(iface, priority)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32) error); ok {
		r0 = rf(iface, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrafficControllerMock_DeleteFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFilter'
type TrafficControllerMock_DeleteFilter_Call struct {
	*mock.Call
}

// DeleteFilter is a helper method to define mock.On call
//   - iface string
//   - priority uint32
func (_e *TrafficControllerMock_Expecter) DeleteFilter(iface interface{}, priority interface{}) *TrafficControllerMock_DeleteFilter_Call {
	return &TrafficControllerMock_DeleteFilter_Call{Call: _e.mock.On("DeleteFilter", iface, priority)}
}

func (_c *TrafficControllerMock_DeleteFilter_Call) Run(run func(iface string, priority uint32)) *TrafficControllerMock_DeleteFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32))
	})
	return _c
}

func (_c *TrafficControllerMock_DeleteFilter_Call) Return(_a0 error) *TrafficControllerMock_DeleteFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrafficControllerMock_DeleteFilter_Call) RunAndReturn(run func(string, uint32) error) *TrafficControllerMock_DeleteFilter_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTrafficControllerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrafficControllerMock creates a new instance of TrafficControllerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrafficControllerMock(t mockConstructorTestingTNewTrafficControllerMock) *TrafficControllerMock {
	mock := &TrafficControllerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
