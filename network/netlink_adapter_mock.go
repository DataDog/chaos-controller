// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package network

import mock "github.com/stretchr/testify/mock"

// MockNetlinkAdapter is an autogenerated mock type for the NetlinkAdapter type
type MockNetlinkAdapter struct {
	mock.Mock
}

type MockNetlinkAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetlinkAdapter) EXPECT() *MockNetlinkAdapter_Expecter {
	return &MockNetlinkAdapter_Expecter{mock: &_m.Mock}
}

// DefaultRoutes provides a mock function with given fields:
func (_m *MockNetlinkAdapter) DefaultRoutes() ([]NetlinkRoute, error) {
	ret := _m.Called()

	var r0 []NetlinkRoute
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]NetlinkRoute, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []NetlinkRoute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NetlinkRoute)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetlinkAdapter_DefaultRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultRoutes'
type MockNetlinkAdapter_DefaultRoutes_Call struct {
	*mock.Call
}

// DefaultRoutes is a helper method to define mock.On call
func (_e *MockNetlinkAdapter_Expecter) DefaultRoutes() *MockNetlinkAdapter_DefaultRoutes_Call {
	return &MockNetlinkAdapter_DefaultRoutes_Call{Call: _e.mock.On("DefaultRoutes")}
}

func (_c *MockNetlinkAdapter_DefaultRoutes_Call) Run(run func()) *MockNetlinkAdapter_DefaultRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetlinkAdapter_DefaultRoutes_Call) Return(_a0 []NetlinkRoute, _a1 error) *MockNetlinkAdapter_DefaultRoutes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetlinkAdapter_DefaultRoutes_Call) RunAndReturn(run func() ([]NetlinkRoute, error)) *MockNetlinkAdapter_DefaultRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// LinkByIndex provides a mock function with given fields: index
func (_m *MockNetlinkAdapter) LinkByIndex(index int) (NetlinkLink, error) {
	ret := _m.Called(index)

	var r0 NetlinkLink
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (NetlinkLink, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(int) NetlinkLink); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(NetlinkLink)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetlinkAdapter_LinkByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkByIndex'
type MockNetlinkAdapter_LinkByIndex_Call struct {
	*mock.Call
}

// LinkByIndex is a helper method to define mock.On call
//   - index int
func (_e *MockNetlinkAdapter_Expecter) LinkByIndex(index interface{}) *MockNetlinkAdapter_LinkByIndex_Call {
	return &MockNetlinkAdapter_LinkByIndex_Call{Call: _e.mock.On("LinkByIndex", index)}
}

func (_c *MockNetlinkAdapter_LinkByIndex_Call) Run(run func(index int)) *MockNetlinkAdapter_LinkByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNetlinkAdapter_LinkByIndex_Call) Return(_a0 NetlinkLink, _a1 error) *MockNetlinkAdapter_LinkByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetlinkAdapter_LinkByIndex_Call) RunAndReturn(run func(int) (NetlinkLink, error)) *MockNetlinkAdapter_LinkByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// LinkByName provides a mock function with given fields: name
func (_m *MockNetlinkAdapter) LinkByName(name string) (NetlinkLink, error) {
	ret := _m.Called(name)

	var r0 NetlinkLink
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (NetlinkLink, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) NetlinkLink); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(NetlinkLink)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetlinkAdapter_LinkByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkByName'
type MockNetlinkAdapter_LinkByName_Call struct {
	*mock.Call
}

// LinkByName is a helper method to define mock.On call
//   - name string
func (_e *MockNetlinkAdapter_Expecter) LinkByName(name interface{}) *MockNetlinkAdapter_LinkByName_Call {
	return &MockNetlinkAdapter_LinkByName_Call{Call: _e.mock.On("LinkByName", name)}
}

func (_c *MockNetlinkAdapter_LinkByName_Call) Run(run func(name string)) *MockNetlinkAdapter_LinkByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetlinkAdapter_LinkByName_Call) Return(_a0 NetlinkLink, _a1 error) *MockNetlinkAdapter_LinkByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetlinkAdapter_LinkByName_Call) RunAndReturn(run func(string) (NetlinkLink, error)) *MockNetlinkAdapter_LinkByName_Call {
	_c.Call.Return(run)
	return _c
}

// LinkList provides a mock function with given fields:
func (_m *MockNetlinkAdapter) LinkList() ([]NetlinkLink, error) {
	ret := _m.Called()

	var r0 []NetlinkLink
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]NetlinkLink, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []NetlinkLink); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NetlinkLink)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetlinkAdapter_LinkList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkList'
type MockNetlinkAdapter_LinkList_Call struct {
	*mock.Call
}

// LinkList is a helper method to define mock.On call
func (_e *MockNetlinkAdapter_Expecter) LinkList() *MockNetlinkAdapter_LinkList_Call {
	return &MockNetlinkAdapter_LinkList_Call{Call: _e.mock.On("LinkList")}
}

func (_c *MockNetlinkAdapter_LinkList_Call) Run(run func()) *MockNetlinkAdapter_LinkList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetlinkAdapter_LinkList_Call) Return(_a0 []NetlinkLink, _a1 error) *MockNetlinkAdapter_LinkList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetlinkAdapter_LinkList_Call) RunAndReturn(run func() ([]NetlinkLink, error)) *MockNetlinkAdapter_LinkList_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockNetlinkAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNetlinkAdapter creates a new instance of MockNetlinkAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNetlinkAdapter(t mockConstructorTestingTNewMockNetlinkAdapter) *MockNetlinkAdapter {
	mock := &MockNetlinkAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
