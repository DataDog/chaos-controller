// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package container

import mock "github.com/stretchr/testify/mock"

// MockContainer is an autogenerated mock type for the Container type
type MockContainer struct {
	mock.Mock
}

type MockContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainer) EXPECT() *MockContainer_Expecter {
	return &MockContainer_Expecter{mock: &_m.Mock}
}

// ID provides a mock function with given fields:
func (_m *MockContainer) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockContainer_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockContainer_Expecter) ID() *MockContainer_ID_Call {
	return &MockContainer_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockContainer_ID_Call) Run(run func()) *MockContainer_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_ID_Call) Return(_a0 string) *MockContainer_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_ID_Call) RunAndReturn(run func() string) *MockContainer_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockContainer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContainer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockContainer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockContainer_Expecter) Name() *MockContainer_Name_Call {
	return &MockContainer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockContainer_Name_Call) Run(run func()) *MockContainer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_Name_Call) Return(_a0 string) *MockContainer_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_Name_Call) RunAndReturn(run func() string) *MockContainer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PID provides a mock function with given fields:
func (_m *MockContainer) PID() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MockContainer_PID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PID'
type MockContainer_PID_Call struct {
	*mock.Call
}

// PID is a helper method to define mock.On call
func (_e *MockContainer_Expecter) PID() *MockContainer_PID_Call {
	return &MockContainer_PID_Call{Call: _e.mock.On("PID")}
}

func (_c *MockContainer_PID_Call) Run(run func()) *MockContainer_PID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_PID_Call) Return(_a0 uint32) *MockContainer_PID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_PID_Call) RunAndReturn(run func() uint32) *MockContainer_PID_Call {
	_c.Call.Return(run)
	return _c
}

// Runtime provides a mock function with given fields:
func (_m *MockContainer) Runtime() Runtime {
	ret := _m.Called()

	var r0 Runtime
	if rf, ok := ret.Get(0).(func() Runtime); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Runtime)
		}
	}

	return r0
}

// MockContainer_Runtime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Runtime'
type MockContainer_Runtime_Call struct {
	*mock.Call
}

// Runtime is a helper method to define mock.On call
func (_e *MockContainer_Expecter) Runtime() *MockContainer_Runtime_Call {
	return &MockContainer_Runtime_Call{Call: _e.mock.On("Runtime")}
}

func (_c *MockContainer_Runtime_Call) Run(run func()) *MockContainer_Runtime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_Runtime_Call) Return(_a0 Runtime) *MockContainer_Runtime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_Runtime_Call) RunAndReturn(run func() Runtime) *MockContainer_Runtime_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockContainer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockContainer creates a new instance of MockContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockContainer(t mockConstructorTestingTNewMockContainer) *MockContainer {
	mock := &MockContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
