// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package container

import mock "github.com/stretchr/testify/mock"

// MockRuntime is an autogenerated mock type for the Runtime type
type MockRuntime struct {
	mock.Mock
}

type MockRuntime_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntime) EXPECT() *MockRuntime_Expecter {
	return &MockRuntime_Expecter{mock: &_m.Mock}
}

// HostPath provides a mock function with given fields: id, path
func (_m *MockRuntime) HostPath(id string, path string) (string, error) {
	ret := _m.Called(id, path)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(id, path)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(id, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntime_HostPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostPath'
type MockRuntime_HostPath_Call struct {
	*mock.Call
}

// HostPath is a helper method to define mock.On call
//   - id string
//   - path string
func (_e *MockRuntime_Expecter) HostPath(id interface{}, path interface{}) *MockRuntime_HostPath_Call {
	return &MockRuntime_HostPath_Call{Call: _e.mock.On("HostPath", id, path)}
}

func (_c *MockRuntime_HostPath_Call) Run(run func(id string, path string)) *MockRuntime_HostPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRuntime_HostPath_Call) Return(_a0 string, _a1 error) *MockRuntime_HostPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntime_HostPath_Call) RunAndReturn(run func(string, string) (string, error)) *MockRuntime_HostPath_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields: id
func (_m *MockRuntime) Name(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntime_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockRuntime_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
//   - id string
func (_e *MockRuntime_Expecter) Name(id interface{}) *MockRuntime_Name_Call {
	return &MockRuntime_Name_Call{Call: _e.mock.On("Name", id)}
}

func (_c *MockRuntime_Name_Call) Run(run func(id string)) *MockRuntime_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRuntime_Name_Call) Return(_a0 string, _a1 error) *MockRuntime_Name_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntime_Name_Call) RunAndReturn(run func(string) (string, error)) *MockRuntime_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PID provides a mock function with given fields: id
func (_m *MockRuntime) PID(id string) (uint32, error) {
	ret := _m.Called(id)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint32, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntime_PID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PID'
type MockRuntime_PID_Call struct {
	*mock.Call
}

// PID is a helper method to define mock.On call
//   - id string
func (_e *MockRuntime_Expecter) PID(id interface{}) *MockRuntime_PID_Call {
	return &MockRuntime_PID_Call{Call: _e.mock.On("PID", id)}
}

func (_c *MockRuntime_PID_Call) Run(run func(id string)) *MockRuntime_PID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRuntime_PID_Call) Return(_a0 uint32, _a1 error) *MockRuntime_PID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntime_PID_Call) RunAndReturn(run func(string) (uint32, error)) *MockRuntime_PID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRuntime interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRuntime creates a new instance of MockRuntime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRuntime(t mockConstructorTestingTNewMockRuntime) *MockRuntime {
	mock := &MockRuntime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
