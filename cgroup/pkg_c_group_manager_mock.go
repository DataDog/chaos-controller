// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package cgroup

import mock "github.com/stretchr/testify/mock"

// pkgCGroupManagerMock is an autogenerated mock type for the pkgCGroupManager type
type pkgCGroupManagerMock struct {
	mock.Mock
}

type pkgCGroupManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *pkgCGroupManagerMock) EXPECT() *pkgCGroupManagerMock_Expecter {
	return &pkgCGroupManagerMock_Expecter{mock: &_m.Mock}
}

// EnterPid provides a mock function with given fields: cgroupPaths, pid
func (_m *pkgCGroupManagerMock) EnterPid(cgroupPaths map[string]string, pid int) error {
	ret := _m.Called(cgroupPaths, pid)

	if len(ret) == 0 {
		panic("no return value specified for EnterPid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string, int) error); ok {
		r0 = rf(cgroupPaths, pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// pkgCGroupManagerMock_EnterPid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnterPid'
type pkgCGroupManagerMock_EnterPid_Call struct {
	*mock.Call
}

// EnterPid is a helper method to define mock.On call
//   - cgroupPaths map[string]string
//   - pid int
func (_e *pkgCGroupManagerMock_Expecter) EnterPid(cgroupPaths interface{}, pid interface{}) *pkgCGroupManagerMock_EnterPid_Call {
	return &pkgCGroupManagerMock_EnterPid_Call{Call: _e.mock.On("EnterPid", cgroupPaths, pid)}
}

func (_c *pkgCGroupManagerMock_EnterPid_Call) Run(run func(cgroupPaths map[string]string, pid int)) *pkgCGroupManagerMock_EnterPid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string), args[1].(int))
	})
	return _c
}

func (_c *pkgCGroupManagerMock_EnterPid_Call) Return(_a0 error) *pkgCGroupManagerMock_EnterPid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *pkgCGroupManagerMock_EnterPid_Call) RunAndReturn(run func(map[string]string, int) error) *pkgCGroupManagerMock_EnterPid_Call {
	_c.Call.Return(run)
	return _c
}

// PathExists provides a mock function with given fields: path
func (_m *pkgCGroupManagerMock) PathExists(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for PathExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// pkgCGroupManagerMock_PathExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PathExists'
type pkgCGroupManagerMock_PathExists_Call struct {
	*mock.Call
}

// PathExists is a helper method to define mock.On call
//   - path string
func (_e *pkgCGroupManagerMock_Expecter) PathExists(path interface{}) *pkgCGroupManagerMock_PathExists_Call {
	return &pkgCGroupManagerMock_PathExists_Call{Call: _e.mock.On("PathExists", path)}
}

func (_c *pkgCGroupManagerMock_PathExists_Call) Run(run func(path string)) *pkgCGroupManagerMock_PathExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *pkgCGroupManagerMock_PathExists_Call) Return(_a0 bool) *pkgCGroupManagerMock_PathExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *pkgCGroupManagerMock_PathExists_Call) RunAndReturn(run func(string) bool) *pkgCGroupManagerMock_PathExists_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: dir, file
func (_m *pkgCGroupManagerMock) ReadFile(dir string, file string) (string, error) {
	ret := _m.Called(dir, file)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(dir, file)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(dir, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(dir, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// pkgCGroupManagerMock_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type pkgCGroupManagerMock_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - dir string
//   - file string
func (_e *pkgCGroupManagerMock_Expecter) ReadFile(dir interface{}, file interface{}) *pkgCGroupManagerMock_ReadFile_Call {
	return &pkgCGroupManagerMock_ReadFile_Call{Call: _e.mock.On("ReadFile", dir, file)}
}

func (_c *pkgCGroupManagerMock_ReadFile_Call) Run(run func(dir string, file string)) *pkgCGroupManagerMock_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *pkgCGroupManagerMock_ReadFile_Call) Return(_a0 string, _a1 error) *pkgCGroupManagerMock_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *pkgCGroupManagerMock_ReadFile_Call) RunAndReturn(run func(string, string) (string, error)) *pkgCGroupManagerMock_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: dir, file, data
func (_m *pkgCGroupManagerMock) WriteFile(dir string, file string, data string) error {
	ret := _m.Called(dir, file, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(dir, file, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// pkgCGroupManagerMock_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type pkgCGroupManagerMock_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - dir string
//   - file string
//   - data string
func (_e *pkgCGroupManagerMock_Expecter) WriteFile(dir interface{}, file interface{}, data interface{}) *pkgCGroupManagerMock_WriteFile_Call {
	return &pkgCGroupManagerMock_WriteFile_Call{Call: _e.mock.On("WriteFile", dir, file, data)}
}

func (_c *pkgCGroupManagerMock_WriteFile_Call) Run(run func(dir string, file string, data string)) *pkgCGroupManagerMock_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *pkgCGroupManagerMock_WriteFile_Call) Return(_a0 error) *pkgCGroupManagerMock_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *pkgCGroupManagerMock_WriteFile_Call) RunAndReturn(run func(string, string, string) error) *pkgCGroupManagerMock_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// newPkgCGroupManagerMock creates a new instance of pkgCGroupManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newPkgCGroupManagerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *pkgCGroupManagerMock {
	mock := &pkgCGroupManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
