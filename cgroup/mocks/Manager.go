// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.

package mocks

import mock "github.com/stretchr/testify/mock"

// ManagerMock is an autogenerated mock type for the Manager type
type ManagerMock struct {
	mock.Mock
}

// DiskThrottleRead provides a mock function with given fields: identifier, bps
func (_m *ManagerMock) DiskThrottleRead(identifier int, bps int) error {
	ret := _m.Called(identifier, bps)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(identifier, bps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiskThrottleWrite provides a mock function with given fields: identifier, bps
func (_m *ManagerMock) DiskThrottleWrite(identifier int, bps int) error {
	ret := _m.Called(identifier, bps)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(identifier, bps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: kind
func (_m *ManagerMock) Exists(controller string) bool {
	ret := _m.Called(controller)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(controller)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsCgroupV2 provides a mock function with given fields:
func (_m *ManagerMock) IsCgroupV2() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Join provides a mock function with given fields: kind, pid, inherit
func (_m *ManagerMock) Join(pid int) error {
	ret := _m.Called(pid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: kind, file
func (_m *ManagerMock) Read(controller string, file string) (string, error) {
	ret := _m.Called(controller, file)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(controller, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(controller, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: kind, file, data
func (_m *ManagerMock) Write(controller string, file string, data string) error {
	ret := _m.Called(controller, file, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(controller, file, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RelativePath provides a mock function with given fields: controller
func (_m *ManagerMock) RelativePath(controller string) string {
	ret := _m.Called(controller)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(controller)
	} else {
		r0 = ret.String(0)
	}

	return r0
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of ManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *ManagerMock {
	mock := &ManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
