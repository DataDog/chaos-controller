// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2024 Datadog, Inc.
package cgroup

import (
	cpuset "github.com/DataDog/chaos-controller/cpuset"
	mock "github.com/stretchr/testify/mock"
)

// ManagerMock is an autogenerated mock type for the Manager type
type ManagerMock struct {
	mock.Mock
}

type ManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagerMock) EXPECT() *ManagerMock_Expecter {
	return &ManagerMock_Expecter{mock: &_m.Mock}
}

// IsCgroupV2 provides a mock function with given fields:
func (_m *ManagerMock) IsCgroupV2() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsCgroupV2")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ManagerMock_IsCgroupV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCgroupV2'
type ManagerMock_IsCgroupV2_Call struct {
	*mock.Call
}

// IsCgroupV2 is a helper method to define mock.On call
func (_e *ManagerMock_Expecter) IsCgroupV2() *ManagerMock_IsCgroupV2_Call {
	return &ManagerMock_IsCgroupV2_Call{Call: _e.mock.On("IsCgroupV2")}
}

func (_c *ManagerMock_IsCgroupV2_Call) Run(run func()) *ManagerMock_IsCgroupV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ManagerMock_IsCgroupV2_Call) Return(_a0 bool) *ManagerMock_IsCgroupV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerMock_IsCgroupV2_Call) RunAndReturn(run func() bool) *ManagerMock_IsCgroupV2_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: pid
func (_m *ManagerMock) Join(pid int) error {
	ret := _m.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManagerMock_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type ManagerMock_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - pid int
func (_e *ManagerMock_Expecter) Join(pid interface{}) *ManagerMock_Join_Call {
	return &ManagerMock_Join_Call{Call: _e.mock.On("Join", pid)}
}

func (_c *ManagerMock_Join_Call) Run(run func(pid int)) *ManagerMock_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ManagerMock_Join_Call) Return(_a0 error) *ManagerMock_Join_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerMock_Join_Call) RunAndReturn(run func(int) error) *ManagerMock_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: controller, file
func (_m *ManagerMock) Read(controller string, file string) (string, error) {
	ret := _m.Called(controller, file)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(controller, file)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(controller, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(controller, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagerMock_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ManagerMock_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - controller string
//   - file string
func (_e *ManagerMock_Expecter) Read(controller interface{}, file interface{}) *ManagerMock_Read_Call {
	return &ManagerMock_Read_Call{Call: _e.mock.On("Read", controller, file)}
}

func (_c *ManagerMock_Read_Call) Run(run func(controller string, file string)) *ManagerMock_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ManagerMock_Read_Call) Return(_a0 string, _a1 error) *ManagerMock_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerMock_Read_Call) RunAndReturn(run func(string, string) (string, error)) *ManagerMock_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadCPUSet provides a mock function with given fields:
func (_m *ManagerMock) ReadCPUSet() (cpuset.CPUSet, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadCPUSet")
	}

	var r0 cpuset.CPUSet
	var r1 error
	if rf, ok := ret.Get(0).(func() (cpuset.CPUSet, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() cpuset.CPUSet); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cpuset.CPUSet)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagerMock_ReadCPUSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadCPUSet'
type ManagerMock_ReadCPUSet_Call struct {
	*mock.Call
}

// ReadCPUSet is a helper method to define mock.On call
func (_e *ManagerMock_Expecter) ReadCPUSet() *ManagerMock_ReadCPUSet_Call {
	return &ManagerMock_ReadCPUSet_Call{Call: _e.mock.On("ReadCPUSet")}
}

func (_c *ManagerMock_ReadCPUSet_Call) Run(run func()) *ManagerMock_ReadCPUSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ManagerMock_ReadCPUSet_Call) Return(_a0 cpuset.CPUSet, _a1 error) *ManagerMock_ReadCPUSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerMock_ReadCPUSet_Call) RunAndReturn(run func() (cpuset.CPUSet, error)) *ManagerMock_ReadCPUSet_Call {
	_c.Call.Return(run)
	return _c
}

// RelativePath provides a mock function with given fields: controller
func (_m *ManagerMock) RelativePath(controller string) string {
	ret := _m.Called(controller)

	if len(ret) == 0 {
		panic("no return value specified for RelativePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(controller)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ManagerMock_RelativePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RelativePath'
type ManagerMock_RelativePath_Call struct {
	*mock.Call
}

// RelativePath is a helper method to define mock.On call
//   - controller string
func (_e *ManagerMock_Expecter) RelativePath(controller interface{}) *ManagerMock_RelativePath_Call {
	return &ManagerMock_RelativePath_Call{Call: _e.mock.On("RelativePath", controller)}
}

func (_c *ManagerMock_RelativePath_Call) Run(run func(controller string)) *ManagerMock_RelativePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ManagerMock_RelativePath_Call) Return(_a0 string) *ManagerMock_RelativePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerMock_RelativePath_Call) RunAndReturn(run func(string) string) *ManagerMock_RelativePath_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: controller, file, data
func (_m *ManagerMock) Write(controller string, file string, data string) error {
	ret := _m.Called(controller, file, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(controller, file, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManagerMock_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ManagerMock_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - controller string
//   - file string
//   - data string
func (_e *ManagerMock_Expecter) Write(controller interface{}, file interface{}, data interface{}) *ManagerMock_Write_Call {
	return &ManagerMock_Write_Call{Call: _e.mock.On("Write", controller, file, data)}
}

func (_c *ManagerMock_Write_Call) Run(run func(controller string, file string, data string)) *ManagerMock_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ManagerMock_Write_Call) Return(_a0 error) *ManagerMock_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerMock_Write_Call) RunAndReturn(run func(string, string, string) error) *ManagerMock_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewManagerMock creates a new instance of ManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerMock {
	mock := &ManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
