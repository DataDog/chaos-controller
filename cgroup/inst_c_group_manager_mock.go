// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package cgroup

import mock "github.com/stretchr/testify/mock"

// instCGroupManagerMock is an autogenerated mock type for the instCGroupManager type
type instCGroupManagerMock struct {
	mock.Mock
}

type instCGroupManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *instCGroupManagerMock) EXPECT() *instCGroupManagerMock_Expecter {
	return &instCGroupManagerMock_Expecter{mock: &_m.Mock}
}

// GetPaths provides a mock function with given fields:
func (_m *instCGroupManagerMock) GetPaths() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPaths")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// instCGroupManagerMock_GetPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaths'
type instCGroupManagerMock_GetPaths_Call struct {
	*mock.Call
}

// GetPaths is a helper method to define mock.On call
func (_e *instCGroupManagerMock_Expecter) GetPaths() *instCGroupManagerMock_GetPaths_Call {
	return &instCGroupManagerMock_GetPaths_Call{Call: _e.mock.On("GetPaths")}
}

func (_c *instCGroupManagerMock_GetPaths_Call) Run(run func()) *instCGroupManagerMock_GetPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *instCGroupManagerMock_GetPaths_Call) Return(_a0 map[string]string) *instCGroupManagerMock_GetPaths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *instCGroupManagerMock_GetPaths_Call) RunAndReturn(run func() map[string]string) *instCGroupManagerMock_GetPaths_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields: _a0
func (_m *instCGroupManagerMock) Path(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// instCGroupManagerMock_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type instCGroupManagerMock_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
//   - _a0 string
func (_e *instCGroupManagerMock_Expecter) Path(_a0 interface{}) *instCGroupManagerMock_Path_Call {
	return &instCGroupManagerMock_Path_Call{Call: _e.mock.On("Path", _a0)}
}

func (_c *instCGroupManagerMock_Path_Call) Run(run func(_a0 string)) *instCGroupManagerMock_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *instCGroupManagerMock_Path_Call) Return(_a0 string) *instCGroupManagerMock_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *instCGroupManagerMock_Path_Call) RunAndReturn(run func(string) string) *instCGroupManagerMock_Path_Call {
	_c.Call.Return(run)
	return _c
}

// newInstCGroupManagerMock creates a new instance of instCGroupManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newInstCGroupManagerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *instCGroupManagerMock {
	mock := &instCGroupManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
