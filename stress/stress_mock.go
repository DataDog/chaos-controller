// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package stress

import mock "github.com/stretchr/testify/mock"

// MockStresser is an autogenerated mock type for the Stresser type
type MockStresser struct {
	mock.Mock
}

type MockStresser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStresser) EXPECT() *MockStresser_Expecter {
	return &MockStresser_Expecter{mock: &_m.Mock}
}

// Stress provides a mock function with given fields: exit
func (_m *MockStresser) Stress(exit <-chan struct{}) {
	_m.Called(exit)
}

// MockStresser_Stress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stress'
type MockStresser_Stress_Call struct {
	*mock.Call
}

// Stress is a helper method to define mock.On call
//   - exit <-chan struct{}
func (_e *MockStresser_Expecter) Stress(exit interface{}) *MockStresser_Stress_Call {
	return &MockStresser_Stress_Call{Call: _e.mock.On("Stress", exit)}
}

func (_c *MockStresser_Stress_Call) Run(run func(exit <-chan struct{})) *MockStresser_Stress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan struct{}))
	})
	return _c
}

func (_c *MockStresser_Stress_Call) Return() *MockStresser_Stress_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStresser_Stress_Call) RunAndReturn(run func(<-chan struct{})) *MockStresser_Stress_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStresser interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStresser creates a new instance of MockStresser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStresser(t mockConstructorTestingTNewMockStresser) *MockStresser {
	mock := &MockStresser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
