// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2025 Datadog, Inc.

package mocks

import (
	context "context"

	logr "github.com/go-logr/logr"

	mock "github.com/stretchr/testify/mock"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	source "sigs.k8s.io/controller-runtime/pkg/source"
)

// RuntimeControllerMock is an autogenerated mock type for the Controller type
type RuntimeControllerMock[request comparable] struct {
	mock.Mock
}

type RuntimeControllerMock_Expecter[request comparable] struct {
	mock *mock.Mock
}

func (_m *RuntimeControllerMock[request]) EXPECT() *RuntimeControllerMock_Expecter[request] {
	return &RuntimeControllerMock_Expecter[request]{mock: &_m.Mock}
}

// GetLogger provides a mock function with no fields
func (_m *RuntimeControllerMock[request]) GetLogger() logr.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 logr.Logger
	if rf, ok := ret.Get(0).(func() logr.Logger); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logr.Logger)
	}

	return r0
}

// RuntimeControllerMock_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type RuntimeControllerMock_GetLogger_Call[request comparable] struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *RuntimeControllerMock_Expecter[request]) GetLogger() *RuntimeControllerMock_GetLogger_Call[request] {
	return &RuntimeControllerMock_GetLogger_Call[request]{Call: _e.mock.On("GetLogger")}
}

func (_c *RuntimeControllerMock_GetLogger_Call[request]) Run(run func()) *RuntimeControllerMock_GetLogger_Call[request] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RuntimeControllerMock_GetLogger_Call[request]) Return(_a0 logr.Logger) *RuntimeControllerMock_GetLogger_Call[request] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RuntimeControllerMock_GetLogger_Call[request]) RunAndReturn(run func() logr.Logger) *RuntimeControllerMock_GetLogger_Call[request] {
	_c.Call.Return(run)
	return _c
}

// Reconcile provides a mock function with given fields: _a0, _a1
func (_m *RuntimeControllerMock[request]) Reconcile(_a0 context.Context, _a1 reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Reconcile")
	}

	var r0 reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) (reconcile.Result, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuntimeControllerMock_Reconcile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconcile'
type RuntimeControllerMock_Reconcile_Call[request comparable] struct {
	*mock.Call
}

// Reconcile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 reconcile.Request
func (_e *RuntimeControllerMock_Expecter[request]) Reconcile(_a0 interface{}, _a1 interface{}) *RuntimeControllerMock_Reconcile_Call[request] {
	return &RuntimeControllerMock_Reconcile_Call[request]{Call: _e.mock.On("Reconcile", _a0, _a1)}
}

func (_c *RuntimeControllerMock_Reconcile_Call[request]) Run(run func(_a0 context.Context, _a1 reconcile.Request)) *RuntimeControllerMock_Reconcile_Call[request] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcile.Request))
	})
	return _c
}

func (_c *RuntimeControllerMock_Reconcile_Call[request]) Return(_a0 reconcile.Result, _a1 error) *RuntimeControllerMock_Reconcile_Call[request] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RuntimeControllerMock_Reconcile_Call[request]) RunAndReturn(run func(context.Context, reconcile.Request) (reconcile.Result, error)) *RuntimeControllerMock_Reconcile_Call[request] {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *RuntimeControllerMock[request]) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RuntimeControllerMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type RuntimeControllerMock_Start_Call[request comparable] struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RuntimeControllerMock_Expecter[request]) Start(ctx interface{}) *RuntimeControllerMock_Start_Call[request] {
	return &RuntimeControllerMock_Start_Call[request]{Call: _e.mock.On("Start", ctx)}
}

func (_c *RuntimeControllerMock_Start_Call[request]) Run(run func(ctx context.Context)) *RuntimeControllerMock_Start_Call[request] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RuntimeControllerMock_Start_Call[request]) Return(_a0 error) *RuntimeControllerMock_Start_Call[request] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RuntimeControllerMock_Start_Call[request]) RunAndReturn(run func(context.Context) error) *RuntimeControllerMock_Start_Call[request] {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: src
func (_m *RuntimeControllerMock[request]) Watch(src source.TypedSource[reconcile.Request]) error {
	ret := _m.Called(src)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(source.TypedSource[reconcile.Request]) error); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RuntimeControllerMock_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type RuntimeControllerMock_Watch_Call[request comparable] struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - src source.TypedSource[reconcile.Request]
func (_e *RuntimeControllerMock_Expecter[request]) Watch(src interface{}) *RuntimeControllerMock_Watch_Call[request] {
	return &RuntimeControllerMock_Watch_Call[request]{Call: _e.mock.On("Watch", src)}
}

func (_c *RuntimeControllerMock_Watch_Call[request]) Run(run func(src source.TypedSource[reconcile.Request])) *RuntimeControllerMock_Watch_Call[request] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(source.TypedSource[reconcile.Request]))
	})
	return _c
}

func (_c *RuntimeControllerMock_Watch_Call[request]) Return(_a0 error) *RuntimeControllerMock_Watch_Call[request] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RuntimeControllerMock_Watch_Call[request]) RunAndReturn(run func(source.TypedSource[reconcile.Request]) error) *RuntimeControllerMock_Watch_Call[request] {
	_c.Call.Return(run)
	return _c
}

// NewRuntimeControllerMock creates a new instance of RuntimeControllerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuntimeControllerMock[request comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *RuntimeControllerMock[request] {
	mock := &RuntimeControllerMock[request]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
