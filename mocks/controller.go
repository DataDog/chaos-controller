// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package mocks

import (
	context "context"

	handler "sigs.k8s.io/controller-runtime/pkg/handler"

	logr "github.com/go-logr/logr"

	mock "github.com/stretchr/testify/mock"

	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	source "sigs.k8s.io/controller-runtime/pkg/source"
)

// ControllerMock is an autogenerated mock type for the Controller type
type ControllerMock struct {
	mock.Mock
}

type ControllerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ControllerMock) EXPECT() *ControllerMock_Expecter {
	return &ControllerMock_Expecter{mock: &_m.Mock}
}

// GetLogger provides a mock function with given fields:
func (_m *ControllerMock) GetLogger() logr.Logger {
	ret := _m.Called()

	var r0 logr.Logger
	if rf, ok := ret.Get(0).(func() logr.Logger); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logr.Logger)
	}

	return r0
}

// ControllerMock_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type ControllerMock_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *ControllerMock_Expecter) GetLogger() *ControllerMock_GetLogger_Call {
	return &ControllerMock_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *ControllerMock_GetLogger_Call) Run(run func()) *ControllerMock_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ControllerMock_GetLogger_Call) Return(_a0 logr.Logger) *ControllerMock_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ControllerMock_GetLogger_Call) RunAndReturn(run func() logr.Logger) *ControllerMock_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// Reconcile provides a mock function with given fields: _a0, _a1
func (_m *ControllerMock) Reconcile(_a0 context.Context, _a1 reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(_a0, _a1)

	var r0 reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) (reconcile.Result, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ControllerMock_Reconcile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconcile'
type ControllerMock_Reconcile_Call struct {
	*mock.Call
}

// Reconcile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 reconcile.Request
func (_e *ControllerMock_Expecter) Reconcile(_a0 interface{}, _a1 interface{}) *ControllerMock_Reconcile_Call {
	return &ControllerMock_Reconcile_Call{Call: _e.mock.On("Reconcile", _a0, _a1)}
}

func (_c *ControllerMock_Reconcile_Call) Run(run func(_a0 context.Context, _a1 reconcile.Request)) *ControllerMock_Reconcile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcile.Request))
	})
	return _c
}

func (_c *ControllerMock_Reconcile_Call) Return(_a0 reconcile.Result, _a1 error) *ControllerMock_Reconcile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ControllerMock_Reconcile_Call) RunAndReturn(run func(context.Context, reconcile.Request) (reconcile.Result, error)) *ControllerMock_Reconcile_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *ControllerMock) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ControllerMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ControllerMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ControllerMock_Expecter) Start(ctx interface{}) *ControllerMock_Start_Call {
	return &ControllerMock_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *ControllerMock_Start_Call) Run(run func(ctx context.Context)) *ControllerMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ControllerMock_Start_Call) Return(_a0 error) *ControllerMock_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ControllerMock_Start_Call) RunAndReturn(run func(context.Context) error) *ControllerMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: src, eventhandler, predicates
func (_m *ControllerMock) Watch(src source.Source, eventhandler handler.EventHandler, predicates ...predicate.Predicate) error {
	_va := make([]interface{}, len(predicates))
	for _i := range predicates {
		_va[_i] = predicates[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, src, eventhandler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(source.Source, handler.EventHandler, ...predicate.Predicate) error); ok {
		r0 = rf(src, eventhandler, predicates...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ControllerMock_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type ControllerMock_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - src source.Source
//   - eventhandler handler.EventHandler
//   - predicates ...predicate.Predicate
func (_e *ControllerMock_Expecter) Watch(src interface{}, eventhandler interface{}, predicates ...interface{}) *ControllerMock_Watch_Call {
	return &ControllerMock_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{src, eventhandler}, predicates...)...)}
}

func (_c *ControllerMock_Watch_Call) Run(run func(src source.Source, eventhandler handler.EventHandler, predicates ...predicate.Predicate)) *ControllerMock_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]predicate.Predicate, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(predicate.Predicate)
			}
		}
		run(args[0].(source.Source), args[1].(handler.EventHandler), variadicArgs...)
	})
	return _c
}

func (_c *ControllerMock_Watch_Call) Return(_a0 error) *ControllerMock_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ControllerMock_Watch_Call) RunAndReturn(run func(source.Source, handler.EventHandler, ...predicate.Predicate) error) *ControllerMock_Watch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewControllerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewControllerMock creates a new instance of ControllerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewControllerMock(t mockConstructorTestingTNewControllerMock) *ControllerMock {
	mock := &ControllerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
