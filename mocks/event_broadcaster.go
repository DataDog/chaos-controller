// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2024 Datadog, Inc.
package mocks

import (
	mock "github.com/stretchr/testify/mock"
	record "k8s.io/client-go/tools/record"
	klog "k8s.io/klog/v2"

	runtime "k8s.io/apimachinery/pkg/runtime"

	v1 "k8s.io/api/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// EventBroadcasterMock is an autogenerated mock type for the EventBroadcaster type
type EventBroadcasterMock struct {
	mock.Mock
}

type EventBroadcasterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EventBroadcasterMock) EXPECT() *EventBroadcasterMock_Expecter {
	return &EventBroadcasterMock_Expecter{mock: &_m.Mock}
}

// NewRecorder provides a mock function with given fields: scheme, source
func (_m *EventBroadcasterMock) NewRecorder(scheme *runtime.Scheme, source v1.EventSource) record.EventRecorderLogger {
	ret := _m.Called(scheme, source)

	if len(ret) == 0 {
		panic("no return value specified for NewRecorder")
	}

	var r0 record.EventRecorderLogger
	if rf, ok := ret.Get(0).(func(*runtime.Scheme, v1.EventSource) record.EventRecorderLogger); ok {
		r0 = rf(scheme, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(record.EventRecorderLogger)
		}
	}

	return r0
}

// EventBroadcasterMock_NewRecorder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRecorder'
type EventBroadcasterMock_NewRecorder_Call struct {
	*mock.Call
}

// NewRecorder is a helper method to define mock.On call
//   - scheme *runtime.Scheme
//   - source v1.EventSource
func (_e *EventBroadcasterMock_Expecter) NewRecorder(scheme interface{}, source interface{}) *EventBroadcasterMock_NewRecorder_Call {
	return &EventBroadcasterMock_NewRecorder_Call{Call: _e.mock.On("NewRecorder", scheme, source)}
}

func (_c *EventBroadcasterMock_NewRecorder_Call) Run(run func(scheme *runtime.Scheme, source v1.EventSource)) *EventBroadcasterMock_NewRecorder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*runtime.Scheme), args[1].(v1.EventSource))
	})
	return _c
}

func (_c *EventBroadcasterMock_NewRecorder_Call) Return(_a0 record.EventRecorderLogger) *EventBroadcasterMock_NewRecorder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventBroadcasterMock_NewRecorder_Call) RunAndReturn(run func(*runtime.Scheme, v1.EventSource) record.EventRecorderLogger) *EventBroadcasterMock_NewRecorder_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *EventBroadcasterMock) Shutdown() {
	_m.Called()
}

// EventBroadcasterMock_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type EventBroadcasterMock_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *EventBroadcasterMock_Expecter) Shutdown() *EventBroadcasterMock_Shutdown_Call {
	return &EventBroadcasterMock_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *EventBroadcasterMock_Shutdown_Call) Run(run func()) *EventBroadcasterMock_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventBroadcasterMock_Shutdown_Call) Return() *EventBroadcasterMock_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventBroadcasterMock_Shutdown_Call) RunAndReturn(run func()) *EventBroadcasterMock_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// StartEventWatcher provides a mock function with given fields: eventHandler
func (_m *EventBroadcasterMock) StartEventWatcher(eventHandler func(*v1.Event)) watch.Interface {
	ret := _m.Called(eventHandler)

	if len(ret) == 0 {
		panic("no return value specified for StartEventWatcher")
	}

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(func(*v1.Event)) watch.Interface); ok {
		r0 = rf(eventHandler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	return r0
}

// EventBroadcasterMock_StartEventWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartEventWatcher'
type EventBroadcasterMock_StartEventWatcher_Call struct {
	*mock.Call
}

// StartEventWatcher is a helper method to define mock.On call
//   - eventHandler func(*v1.Event)
func (_e *EventBroadcasterMock_Expecter) StartEventWatcher(eventHandler interface{}) *EventBroadcasterMock_StartEventWatcher_Call {
	return &EventBroadcasterMock_StartEventWatcher_Call{Call: _e.mock.On("StartEventWatcher", eventHandler)}
}

func (_c *EventBroadcasterMock_StartEventWatcher_Call) Run(run func(eventHandler func(*v1.Event))) *EventBroadcasterMock_StartEventWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*v1.Event)))
	})
	return _c
}

func (_c *EventBroadcasterMock_StartEventWatcher_Call) Return(_a0 watch.Interface) *EventBroadcasterMock_StartEventWatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventBroadcasterMock_StartEventWatcher_Call) RunAndReturn(run func(func(*v1.Event)) watch.Interface) *EventBroadcasterMock_StartEventWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// StartLogging provides a mock function with given fields: logf
func (_m *EventBroadcasterMock) StartLogging(logf func(string, ...interface{})) watch.Interface {
	ret := _m.Called(logf)

	if len(ret) == 0 {
		panic("no return value specified for StartLogging")
	}

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(func(string, ...interface{})) watch.Interface); ok {
		r0 = rf(logf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	return r0
}

// EventBroadcasterMock_StartLogging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartLogging'
type EventBroadcasterMock_StartLogging_Call struct {
	*mock.Call
}

// StartLogging is a helper method to define mock.On call
//   - logf func(string , ...interface{})
func (_e *EventBroadcasterMock_Expecter) StartLogging(logf interface{}) *EventBroadcasterMock_StartLogging_Call {
	return &EventBroadcasterMock_StartLogging_Call{Call: _e.mock.On("StartLogging", logf)}
}

func (_c *EventBroadcasterMock_StartLogging_Call) Run(run func(logf func(string, ...interface{}))) *EventBroadcasterMock_StartLogging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, ...interface{})))
	})
	return _c
}

func (_c *EventBroadcasterMock_StartLogging_Call) Return(_a0 watch.Interface) *EventBroadcasterMock_StartLogging_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventBroadcasterMock_StartLogging_Call) RunAndReturn(run func(func(string, ...interface{})) watch.Interface) *EventBroadcasterMock_StartLogging_Call {
	_c.Call.Return(run)
	return _c
}

// StartRecordingToSink provides a mock function with given fields: sink
func (_m *EventBroadcasterMock) StartRecordingToSink(sink record.EventSink) watch.Interface {
	ret := _m.Called(sink)

	if len(ret) == 0 {
		panic("no return value specified for StartRecordingToSink")
	}

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(record.EventSink) watch.Interface); ok {
		r0 = rf(sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	return r0
}

// EventBroadcasterMock_StartRecordingToSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartRecordingToSink'
type EventBroadcasterMock_StartRecordingToSink_Call struct {
	*mock.Call
}

// StartRecordingToSink is a helper method to define mock.On call
//   - sink record.EventSink
func (_e *EventBroadcasterMock_Expecter) StartRecordingToSink(sink interface{}) *EventBroadcasterMock_StartRecordingToSink_Call {
	return &EventBroadcasterMock_StartRecordingToSink_Call{Call: _e.mock.On("StartRecordingToSink", sink)}
}

func (_c *EventBroadcasterMock_StartRecordingToSink_Call) Run(run func(sink record.EventSink)) *EventBroadcasterMock_StartRecordingToSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(record.EventSink))
	})
	return _c
}

func (_c *EventBroadcasterMock_StartRecordingToSink_Call) Return(_a0 watch.Interface) *EventBroadcasterMock_StartRecordingToSink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventBroadcasterMock_StartRecordingToSink_Call) RunAndReturn(run func(record.EventSink) watch.Interface) *EventBroadcasterMock_StartRecordingToSink_Call {
	_c.Call.Return(run)
	return _c
}

// StartStructuredLogging provides a mock function with given fields: verbosity
func (_m *EventBroadcasterMock) StartStructuredLogging(verbosity klog.Level) watch.Interface {
	ret := _m.Called(verbosity)

	if len(ret) == 0 {
		panic("no return value specified for StartStructuredLogging")
	}

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(klog.Level) watch.Interface); ok {
		r0 = rf(verbosity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	return r0
}

// EventBroadcasterMock_StartStructuredLogging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartStructuredLogging'
type EventBroadcasterMock_StartStructuredLogging_Call struct {
	*mock.Call
}

// StartStructuredLogging is a helper method to define mock.On call
//   - verbosity klog.Level
func (_e *EventBroadcasterMock_Expecter) StartStructuredLogging(verbosity interface{}) *EventBroadcasterMock_StartStructuredLogging_Call {
	return &EventBroadcasterMock_StartStructuredLogging_Call{Call: _e.mock.On("StartStructuredLogging", verbosity)}
}

func (_c *EventBroadcasterMock_StartStructuredLogging_Call) Run(run func(verbosity klog.Level)) *EventBroadcasterMock_StartStructuredLogging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(klog.Level))
	})
	return _c
}

func (_c *EventBroadcasterMock_StartStructuredLogging_Call) Return(_a0 watch.Interface) *EventBroadcasterMock_StartStructuredLogging_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventBroadcasterMock_StartStructuredLogging_Call) RunAndReturn(run func(klog.Level) watch.Interface) *EventBroadcasterMock_StartStructuredLogging_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventBroadcasterMock creates a new instance of EventBroadcasterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventBroadcasterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventBroadcasterMock {
	mock := &EventBroadcasterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
