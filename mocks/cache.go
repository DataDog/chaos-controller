// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2025 Datadog, Inc.

package mocks

import (
	cache "sigs.k8s.io/controller-runtime/pkg/cache"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	schema "k8s.io/apimachinery/pkg/runtime/schema"

	types "k8s.io/apimachinery/pkg/types"
)

// CacheCacheMock is an autogenerated mock type for the Cache type
type CacheCacheMock struct {
	mock.Mock
}

type CacheCacheMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheCacheMock) EXPECT() *CacheCacheMock_Expecter {
	return &CacheCacheMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key, obj, opts
func (_m *CacheCacheMock) Get(ctx context.Context, key types.NamespacedName, obj client.Object, opts ...client.GetOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName, client.Object, ...client.GetOption) error); ok {
		r0 = rf(ctx, key, obj, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheCacheMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheCacheMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key types.NamespacedName
//   - obj client.Object
//   - opts ...client.GetOption
func (_e *CacheCacheMock_Expecter) Get(ctx interface{}, key interface{}, obj interface{}, opts ...interface{}) *CacheCacheMock_Get_Call {
	return &CacheCacheMock_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, key, obj}, opts...)...)}
}

func (_c *CacheCacheMock_Get_Call) Run(run func(ctx context.Context, key types.NamespacedName, obj client.Object, opts ...client.GetOption)) *CacheCacheMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.GetOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.GetOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.NamespacedName), args[2].(client.Object), variadicArgs...)
	})
	return _c
}

func (_c *CacheCacheMock_Get_Call) Return(_a0 error) *CacheCacheMock_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheCacheMock_Get_Call) RunAndReturn(run func(context.Context, types.NamespacedName, client.Object, ...client.GetOption) error) *CacheCacheMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetInformer provides a mock function with given fields: ctx, obj, opts
func (_m *CacheCacheMock) GetInformer(ctx context.Context, obj client.Object, opts ...cache.InformerGetOption) (cache.Informer, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInformer")
	}

	var r0 cache.Informer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object, ...cache.InformerGetOption) (cache.Informer, error)); ok {
		return rf(ctx, obj, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.Object, ...cache.InformerGetOption) cache.Informer); ok {
		r0 = rf(ctx, obj, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Informer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.Object, ...cache.InformerGetOption) error); ok {
		r1 = rf(ctx, obj, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheCacheMock_GetInformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInformer'
type CacheCacheMock_GetInformer_Call struct {
	*mock.Call
}

// GetInformer is a helper method to define mock.On call
//   - ctx context.Context
//   - obj client.Object
//   - opts ...cache.InformerGetOption
func (_e *CacheCacheMock_Expecter) GetInformer(ctx interface{}, obj interface{}, opts ...interface{}) *CacheCacheMock_GetInformer_Call {
	return &CacheCacheMock_GetInformer_Call{Call: _e.mock.On("GetInformer",
		append([]interface{}{ctx, obj}, opts...)...)}
}

func (_c *CacheCacheMock_GetInformer_Call) Run(run func(ctx context.Context, obj client.Object, opts ...cache.InformerGetOption)) *CacheCacheMock_GetInformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cache.InformerGetOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(cache.InformerGetOption)
			}
		}
		run(args[0].(context.Context), args[1].(client.Object), variadicArgs...)
	})
	return _c
}

func (_c *CacheCacheMock_GetInformer_Call) Return(_a0 cache.Informer, _a1 error) *CacheCacheMock_GetInformer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheCacheMock_GetInformer_Call) RunAndReturn(run func(context.Context, client.Object, ...cache.InformerGetOption) (cache.Informer, error)) *CacheCacheMock_GetInformer_Call {
	_c.Call.Return(run)
	return _c
}

// GetInformerForKind provides a mock function with given fields: ctx, gvk, opts
func (_m *CacheCacheMock) GetInformerForKind(ctx context.Context, gvk schema.GroupVersionKind, opts ...cache.InformerGetOption) (cache.Informer, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gvk)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInformerForKind")
	}

	var r0 cache.Informer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.GroupVersionKind, ...cache.InformerGetOption) (cache.Informer, error)); ok {
		return rf(ctx, gvk, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.GroupVersionKind, ...cache.InformerGetOption) cache.Informer); ok {
		r0 = rf(ctx, gvk, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Informer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.GroupVersionKind, ...cache.InformerGetOption) error); ok {
		r1 = rf(ctx, gvk, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheCacheMock_GetInformerForKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInformerForKind'
type CacheCacheMock_GetInformerForKind_Call struct {
	*mock.Call
}

// GetInformerForKind is a helper method to define mock.On call
//   - ctx context.Context
//   - gvk schema.GroupVersionKind
//   - opts ...cache.InformerGetOption
func (_e *CacheCacheMock_Expecter) GetInformerForKind(ctx interface{}, gvk interface{}, opts ...interface{}) *CacheCacheMock_GetInformerForKind_Call {
	return &CacheCacheMock_GetInformerForKind_Call{Call: _e.mock.On("GetInformerForKind",
		append([]interface{}{ctx, gvk}, opts...)...)}
}

func (_c *CacheCacheMock_GetInformerForKind_Call) Run(run func(ctx context.Context, gvk schema.GroupVersionKind, opts ...cache.InformerGetOption)) *CacheCacheMock_GetInformerForKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cache.InformerGetOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(cache.InformerGetOption)
			}
		}
		run(args[0].(context.Context), args[1].(schema.GroupVersionKind), variadicArgs...)
	})
	return _c
}

func (_c *CacheCacheMock_GetInformerForKind_Call) Return(_a0 cache.Informer, _a1 error) *CacheCacheMock_GetInformerForKind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheCacheMock_GetInformerForKind_Call) RunAndReturn(run func(context.Context, schema.GroupVersionKind, ...cache.InformerGetOption) (cache.Informer, error)) *CacheCacheMock_GetInformerForKind_Call {
	_c.Call.Return(run)
	return _c
}

// IndexField provides a mock function with given fields: ctx, obj, field, extractValue
func (_m *CacheCacheMock) IndexField(ctx context.Context, obj client.Object, field string, extractValue client.IndexerFunc) error {
	ret := _m.Called(ctx, obj, field, extractValue)

	if len(ret) == 0 {
		panic("no return value specified for IndexField")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object, string, client.IndexerFunc) error); ok {
		r0 = rf(ctx, obj, field, extractValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheCacheMock_IndexField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexField'
type CacheCacheMock_IndexField_Call struct {
	*mock.Call
}

// IndexField is a helper method to define mock.On call
//   - ctx context.Context
//   - obj client.Object
//   - field string
//   - extractValue client.IndexerFunc
func (_e *CacheCacheMock_Expecter) IndexField(ctx interface{}, obj interface{}, field interface{}, extractValue interface{}) *CacheCacheMock_IndexField_Call {
	return &CacheCacheMock_IndexField_Call{Call: _e.mock.On("IndexField", ctx, obj, field, extractValue)}
}

func (_c *CacheCacheMock_IndexField_Call) Run(run func(ctx context.Context, obj client.Object, field string, extractValue client.IndexerFunc)) *CacheCacheMock_IndexField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.Object), args[2].(string), args[3].(client.IndexerFunc))
	})
	return _c
}

func (_c *CacheCacheMock_IndexField_Call) Return(_a0 error) *CacheCacheMock_IndexField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheCacheMock_IndexField_Call) RunAndReturn(run func(context.Context, client.Object, string, client.IndexerFunc) error) *CacheCacheMock_IndexField_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, list, opts
func (_m *CacheCacheMock) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, list)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ObjectList, ...client.ListOption) error); ok {
		r0 = rf(ctx, list, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheCacheMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CacheCacheMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - list client.ObjectList
//   - opts ...client.ListOption
func (_e *CacheCacheMock_Expecter) List(ctx interface{}, list interface{}, opts ...interface{}) *CacheCacheMock_List_Call {
	return &CacheCacheMock_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, list}, opts...)...)}
}

func (_c *CacheCacheMock_List_Call) Run(run func(ctx context.Context, list client.ObjectList, opts ...client.ListOption)) *CacheCacheMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.ListOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.ListOption)
			}
		}
		run(args[0].(context.Context), args[1].(client.ObjectList), variadicArgs...)
	})
	return _c
}

func (_c *CacheCacheMock_List_Call) Return(_a0 error) *CacheCacheMock_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheCacheMock_List_Call) RunAndReturn(run func(context.Context, client.ObjectList, ...client.ListOption) error) *CacheCacheMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInformer provides a mock function with given fields: ctx, obj
func (_m *CacheCacheMock) RemoveInformer(ctx context.Context, obj client.Object) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for RemoveInformer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheCacheMock_RemoveInformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInformer'
type CacheCacheMock_RemoveInformer_Call struct {
	*mock.Call
}

// RemoveInformer is a helper method to define mock.On call
//   - ctx context.Context
//   - obj client.Object
func (_e *CacheCacheMock_Expecter) RemoveInformer(ctx interface{}, obj interface{}) *CacheCacheMock_RemoveInformer_Call {
	return &CacheCacheMock_RemoveInformer_Call{Call: _e.mock.On("RemoveInformer", ctx, obj)}
}

func (_c *CacheCacheMock_RemoveInformer_Call) Run(run func(ctx context.Context, obj client.Object)) *CacheCacheMock_RemoveInformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.Object))
	})
	return _c
}

func (_c *CacheCacheMock_RemoveInformer_Call) Return(_a0 error) *CacheCacheMock_RemoveInformer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheCacheMock_RemoveInformer_Call) RunAndReturn(run func(context.Context, client.Object) error) *CacheCacheMock_RemoveInformer_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *CacheCacheMock) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheCacheMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type CacheCacheMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CacheCacheMock_Expecter) Start(ctx interface{}) *CacheCacheMock_Start_Call {
	return &CacheCacheMock_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *CacheCacheMock_Start_Call) Run(run func(ctx context.Context)) *CacheCacheMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CacheCacheMock_Start_Call) Return(_a0 error) *CacheCacheMock_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheCacheMock_Start_Call) RunAndReturn(run func(context.Context) error) *CacheCacheMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForCacheSync provides a mock function with given fields: ctx
func (_m *CacheCacheMock) WaitForCacheSync(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitForCacheSync")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CacheCacheMock_WaitForCacheSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForCacheSync'
type CacheCacheMock_WaitForCacheSync_Call struct {
	*mock.Call
}

// WaitForCacheSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CacheCacheMock_Expecter) WaitForCacheSync(ctx interface{}) *CacheCacheMock_WaitForCacheSync_Call {
	return &CacheCacheMock_WaitForCacheSync_Call{Call: _e.mock.On("WaitForCacheSync", ctx)}
}

func (_c *CacheCacheMock_WaitForCacheSync_Call) Run(run func(ctx context.Context)) *CacheCacheMock_WaitForCacheSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CacheCacheMock_WaitForCacheSync_Call) Return(_a0 bool) *CacheCacheMock_WaitForCacheSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheCacheMock_WaitForCacheSync_Call) RunAndReturn(run func(context.Context) bool) *CacheCacheMock_WaitForCacheSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheCacheMock creates a new instance of CacheCacheMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheCacheMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheCacheMock {
	mock := &CacheCacheMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
