// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package mocks

import (
	cgroup "github.com/DataDog/chaos-controller/cgroup"
	cpuset "github.com/DataDog/chaos-controller/cpuset"

	intstr "k8s.io/apimachinery/pkg/util/intstr"

	mock "github.com/stretchr/testify/mock"
)

// StresserManagerMock is an autogenerated mock type for the StresserManager type
type StresserManagerMock struct {
	mock.Mock
}

type StresserManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StresserManagerMock) EXPECT() *StresserManagerMock_Expecter {
	return &StresserManagerMock_Expecter{mock: &_m.Mock}
}

// IsCoreAlreadyStressed provides a mock function with given fields: core
func (_m *StresserManagerMock) IsCoreAlreadyStressed(core int) bool {
	ret := _m.Called(core)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(core)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StresserManagerMock_IsCoreAlreadyStressed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCoreAlreadyStressed'
type StresserManagerMock_IsCoreAlreadyStressed_Call struct {
	*mock.Call
}

// IsCoreAlreadyStressed is a helper method to define mock.On call
//   - core int
func (_e *StresserManagerMock_Expecter) IsCoreAlreadyStressed(core interface{}) *StresserManagerMock_IsCoreAlreadyStressed_Call {
	return &StresserManagerMock_IsCoreAlreadyStressed_Call{Call: _e.mock.On("IsCoreAlreadyStressed", core)}
}

func (_c *StresserManagerMock_IsCoreAlreadyStressed_Call) Run(run func(core int)) *StresserManagerMock_IsCoreAlreadyStressed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *StresserManagerMock_IsCoreAlreadyStressed_Call) Return(_a0 bool) *StresserManagerMock_IsCoreAlreadyStressed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StresserManagerMock_IsCoreAlreadyStressed_Call) RunAndReturn(run func(int) bool) *StresserManagerMock_IsCoreAlreadyStressed_Call {
	_c.Call.Return(run)
	return _c
}

// StresserPIDs provides a mock function with given fields:
func (_m *StresserManagerMock) StresserPIDs() map[int]int {
	ret := _m.Called()

	var r0 map[int]int
	if rf, ok := ret.Get(0).(func() map[int]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]int)
		}
	}

	return r0
}

// StresserManagerMock_StresserPIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StresserPIDs'
type StresserManagerMock_StresserPIDs_Call struct {
	*mock.Call
}

// StresserPIDs is a helper method to define mock.On call
func (_e *StresserManagerMock_Expecter) StresserPIDs() *StresserManagerMock_StresserPIDs_Call {
	return &StresserManagerMock_StresserPIDs_Call{Call: _e.mock.On("StresserPIDs")}
}

func (_c *StresserManagerMock_StresserPIDs_Call) Run(run func()) *StresserManagerMock_StresserPIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StresserManagerMock_StresserPIDs_Call) Return(_a0 map[int]int) *StresserManagerMock_StresserPIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StresserManagerMock_StresserPIDs_Call) RunAndReturn(run func() map[int]int) *StresserManagerMock_StresserPIDs_Call {
	_c.Call.Return(run)
	return _c
}

// TrackCoreAlreadyStressed provides a mock function with given fields: core, stresserPID
func (_m *StresserManagerMock) TrackCoreAlreadyStressed(core int, stresserPID int) {
	_m.Called(core, stresserPID)
}

// StresserManagerMock_TrackCoreAlreadyStressed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackCoreAlreadyStressed'
type StresserManagerMock_TrackCoreAlreadyStressed_Call struct {
	*mock.Call
}

// TrackCoreAlreadyStressed is a helper method to define mock.On call
//   - core int
//   - stresserPID int
func (_e *StresserManagerMock_Expecter) TrackCoreAlreadyStressed(core interface{}, stresserPID interface{}) *StresserManagerMock_TrackCoreAlreadyStressed_Call {
	return &StresserManagerMock_TrackCoreAlreadyStressed_Call{Call: _e.mock.On("TrackCoreAlreadyStressed", core, stresserPID)}
}

func (_c *StresserManagerMock_TrackCoreAlreadyStressed_Call) Run(run func(core int, stresserPID int)) *StresserManagerMock_TrackCoreAlreadyStressed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *StresserManagerMock_TrackCoreAlreadyStressed_Call) Return() *StresserManagerMock_TrackCoreAlreadyStressed_Call {
	_c.Call.Return()
	return _c
}

func (_c *StresserManagerMock_TrackCoreAlreadyStressed_Call) RunAndReturn(run func(int, int)) *StresserManagerMock_TrackCoreAlreadyStressed_Call {
	_c.Call.Return(run)
	return _c
}

// TrackInjectorCores provides a mock function with given fields: _a0, userRequestCount
func (_m *StresserManagerMock) TrackInjectorCores(_a0 cgroup.Manager, userRequestCount *intstr.IntOrString) (cpuset.CPUSet, error) {
	ret := _m.Called(_a0, userRequestCount)

	var r0 cpuset.CPUSet
	var r1 error
	if rf, ok := ret.Get(0).(func(cgroup.Manager, *intstr.IntOrString) (cpuset.CPUSet, error)); ok {
		return rf(_a0, userRequestCount)
	}
	if rf, ok := ret.Get(0).(func(cgroup.Manager, *intstr.IntOrString) cpuset.CPUSet); ok {
		r0 = rf(_a0, userRequestCount)
	} else {
		r0 = ret.Get(0).(cpuset.CPUSet)
	}

	if rf, ok := ret.Get(1).(func(cgroup.Manager, *intstr.IntOrString) error); ok {
		r1 = rf(_a0, userRequestCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StresserManagerMock_TrackInjectorCores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrackInjectorCores'
type StresserManagerMock_TrackInjectorCores_Call struct {
	*mock.Call
}

// TrackInjectorCores is a helper method to define mock.On call
//   - _a0 cgroup.Manager
//   - userRequestCount *intstr.IntOrString
func (_e *StresserManagerMock_Expecter) TrackInjectorCores(_a0 interface{}, userRequestCount interface{}) *StresserManagerMock_TrackInjectorCores_Call {
	return &StresserManagerMock_TrackInjectorCores_Call{Call: _e.mock.On("TrackInjectorCores", _a0, userRequestCount)}
}

func (_c *StresserManagerMock_TrackInjectorCores_Call) Run(run func(_a0 cgroup.Manager, userRequestCount *intstr.IntOrString)) *StresserManagerMock_TrackInjectorCores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cgroup.Manager), args[1].(*intstr.IntOrString))
	})
	return _c
}

func (_c *StresserManagerMock_TrackInjectorCores_Call) Return(_a0 cpuset.CPUSet, _a1 error) *StresserManagerMock_TrackInjectorCores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StresserManagerMock_TrackInjectorCores_Call) RunAndReturn(run func(cgroup.Manager, *intstr.IntOrString) (cpuset.CPUSet, error)) *StresserManagerMock_TrackInjectorCores_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStresserManagerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewStresserManagerMock creates a new instance of StresserManagerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStresserManagerMock(t mockConstructorTestingTNewStresserManagerMock) *StresserManagerMock {
	mock := &StresserManagerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
