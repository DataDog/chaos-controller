// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package mocks

import mock "github.com/stretchr/testify/mock"

// CommandMock is an autogenerated mock type for the command type
type CommandMock struct {
	mock.Mock
}

type CommandMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CommandMock) EXPECT() *CommandMock_Expecter {
	return &CommandMock_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields:
func (_m *CommandMock) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommandMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type CommandMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *CommandMock_Expecter) Start() *CommandMock_Start_Call {
	return &CommandMock_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *CommandMock_Start_Call) Run(run func()) *CommandMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CommandMock_Start_Call) Return(_a0 error) *CommandMock_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommandMock_Start_Call) RunAndReturn(run func() error) *CommandMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *CommandMock) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CommandMock_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type CommandMock_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *CommandMock_Expecter) String() *CommandMock_String_Call {
	return &CommandMock_String_Call{Call: _e.mock.On("String")}
}

func (_c *CommandMock_String_Call) Run(run func()) *CommandMock_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CommandMock_String_Call) Return(_a0 string) *CommandMock_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommandMock_String_Call) RunAndReturn(run func() string) *CommandMock_String_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *CommandMock) Wait() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommandMock_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type CommandMock_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *CommandMock_Expecter) Wait() *CommandMock_Wait_Call {
	return &CommandMock_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *CommandMock_Wait_Call) Run(run func()) *CommandMock_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CommandMock_Wait_Call) Return(_a0 error) *CommandMock_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommandMock_Wait_Call) RunAndReturn(run func() error) *CommandMock_Wait_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCommandMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandMock creates a new instance of CommandMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandMock(t mockConstructorTestingTNewCommandMock) *CommandMock {
	mock := &CommandMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
