// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2025 Datadog, Inc.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	workqueue "k8s.io/client-go/util/workqueue"
)

// SyncingSourceMock is an autogenerated mock type for the SyncingSource type
type SyncingSourceMock[request comparable] struct {
	mock.Mock
}

type SyncingSourceMock_Expecter[request comparable] struct {
	mock *mock.Mock
}

func (_m *SyncingSourceMock[request]) EXPECT() *SyncingSourceMock_Expecter[request] {
	return &SyncingSourceMock_Expecter[request]{mock: &_m.Mock}
}

// Start provides a mock function with given fields: _a0, _a1
func (_m *SyncingSourceMock[request]) Start(_a0 context.Context, _a1 workqueue.TypedRateLimitingInterface[reconcile.Request]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workqueue.TypedRateLimitingInterface[reconcile.Request]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncingSourceMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type SyncingSourceMock_Start_Call[request comparable] struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 workqueue.TypedRateLimitingInterface[reconcile.Request]
func (_e *SyncingSourceMock_Expecter[request]) Start(_a0 interface{}, _a1 interface{}) *SyncingSourceMock_Start_Call[request] {
	return &SyncingSourceMock_Start_Call[request]{Call: _e.mock.On("Start", _a0, _a1)}
}

func (_c *SyncingSourceMock_Start_Call[request]) Run(run func(_a0 context.Context, _a1 workqueue.TypedRateLimitingInterface[reconcile.Request])) *SyncingSourceMock_Start_Call[request] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workqueue.TypedRateLimitingInterface[reconcile.Request]))
	})
	return _c
}

func (_c *SyncingSourceMock_Start_Call[request]) Return(_a0 error) *SyncingSourceMock_Start_Call[request] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SyncingSourceMock_Start_Call[request]) RunAndReturn(run func(context.Context, workqueue.TypedRateLimitingInterface[reconcile.Request]) error) *SyncingSourceMock_Start_Call[request] {
	_c.Call.Return(run)
	return _c
}

// WaitForSync provides a mock function with given fields: ctx
func (_m *SyncingSourceMock[request]) WaitForSync(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitForSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncingSourceMock_WaitForSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForSync'
type SyncingSourceMock_WaitForSync_Call[request comparable] struct {
	*mock.Call
}

// WaitForSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SyncingSourceMock_Expecter[request]) WaitForSync(ctx interface{}) *SyncingSourceMock_WaitForSync_Call[request] {
	return &SyncingSourceMock_WaitForSync_Call[request]{Call: _e.mock.On("WaitForSync", ctx)}
}

func (_c *SyncingSourceMock_WaitForSync_Call[request]) Run(run func(ctx context.Context)) *SyncingSourceMock_WaitForSync_Call[request] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SyncingSourceMock_WaitForSync_Call[request]) Return(_a0 error) *SyncingSourceMock_WaitForSync_Call[request] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SyncingSourceMock_WaitForSync_Call[request]) RunAndReturn(run func(context.Context) error) *SyncingSourceMock_WaitForSync_Call[request] {
	_c.Call.Return(run)
	return _c
}

// NewSyncingSourceMock creates a new instance of SyncingSourceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncingSourceMock[request comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncingSourceMock[request] {
	mock := &SyncingSourceMock[request]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
