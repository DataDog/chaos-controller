// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2024 Datadog, Inc.
package mocks

import (
	mock "github.com/stretchr/testify/mock"
	flowcontrol "k8s.io/client-go/util/flowcontrol"

	rest "k8s.io/client-go/rest"

	schema "k8s.io/apimachinery/pkg/runtime/schema"

	types "k8s.io/apimachinery/pkg/types"
)

// K8SRestInterfaceMock is an autogenerated mock type for the Interface type
type K8SRestInterfaceMock struct {
	mock.Mock
}

type K8SRestInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *K8SRestInterfaceMock) EXPECT() *K8SRestInterfaceMock_Expecter {
	return &K8SRestInterfaceMock_Expecter{mock: &_m.Mock}
}

// APIVersion provides a mock function with given fields:
func (_m *K8SRestInterfaceMock) APIVersion() schema.GroupVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for APIVersion")
	}

	var r0 schema.GroupVersion
	if rf, ok := ret.Get(0).(func() schema.GroupVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(schema.GroupVersion)
	}

	return r0
}

// K8SRestInterfaceMock_APIVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APIVersion'
type K8SRestInterfaceMock_APIVersion_Call struct {
	*mock.Call
}

// APIVersion is a helper method to define mock.On call
func (_e *K8SRestInterfaceMock_Expecter) APIVersion() *K8SRestInterfaceMock_APIVersion_Call {
	return &K8SRestInterfaceMock_APIVersion_Call{Call: _e.mock.On("APIVersion")}
}

func (_c *K8SRestInterfaceMock_APIVersion_Call) Run(run func()) *K8SRestInterfaceMock_APIVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8SRestInterfaceMock_APIVersion_Call) Return(_a0 schema.GroupVersion) *K8SRestInterfaceMock_APIVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_APIVersion_Call) RunAndReturn(run func() schema.GroupVersion) *K8SRestInterfaceMock_APIVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields:
func (_m *K8SRestInterfaceMock) Delete() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// K8SRestInterfaceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type K8SRestInterfaceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *K8SRestInterfaceMock_Expecter) Delete() *K8SRestInterfaceMock_Delete_Call {
	return &K8SRestInterfaceMock_Delete_Call{Call: _e.mock.On("Delete")}
}

func (_c *K8SRestInterfaceMock_Delete_Call) Run(run func()) *K8SRestInterfaceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8SRestInterfaceMock_Delete_Call) Return(_a0 *rest.Request) *K8SRestInterfaceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_Delete_Call) RunAndReturn(run func() *rest.Request) *K8SRestInterfaceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields:
func (_m *K8SRestInterfaceMock) Get() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// K8SRestInterfaceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type K8SRestInterfaceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *K8SRestInterfaceMock_Expecter) Get() *K8SRestInterfaceMock_Get_Call {
	return &K8SRestInterfaceMock_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *K8SRestInterfaceMock_Get_Call) Run(run func()) *K8SRestInterfaceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8SRestInterfaceMock_Get_Call) Return(_a0 *rest.Request) *K8SRestInterfaceMock_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_Get_Call) RunAndReturn(run func() *rest.Request) *K8SRestInterfaceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRateLimiter provides a mock function with given fields:
func (_m *K8SRestInterfaceMock) GetRateLimiter() flowcontrol.RateLimiter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRateLimiter")
	}

	var r0 flowcontrol.RateLimiter
	if rf, ok := ret.Get(0).(func() flowcontrol.RateLimiter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrol.RateLimiter)
		}
	}

	return r0
}

// K8SRestInterfaceMock_GetRateLimiter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRateLimiter'
type K8SRestInterfaceMock_GetRateLimiter_Call struct {
	*mock.Call
}

// GetRateLimiter is a helper method to define mock.On call
func (_e *K8SRestInterfaceMock_Expecter) GetRateLimiter() *K8SRestInterfaceMock_GetRateLimiter_Call {
	return &K8SRestInterfaceMock_GetRateLimiter_Call{Call: _e.mock.On("GetRateLimiter")}
}

func (_c *K8SRestInterfaceMock_GetRateLimiter_Call) Run(run func()) *K8SRestInterfaceMock_GetRateLimiter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8SRestInterfaceMock_GetRateLimiter_Call) Return(_a0 flowcontrol.RateLimiter) *K8SRestInterfaceMock_GetRateLimiter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_GetRateLimiter_Call) RunAndReturn(run func() flowcontrol.RateLimiter) *K8SRestInterfaceMock_GetRateLimiter_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: pt
func (_m *K8SRestInterfaceMock) Patch(pt types.PatchType) *rest.Request {
	ret := _m.Called(pt)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func(types.PatchType) *rest.Request); ok {
		r0 = rf(pt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// K8SRestInterfaceMock_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type K8SRestInterfaceMock_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - pt types.PatchType
func (_e *K8SRestInterfaceMock_Expecter) Patch(pt interface{}) *K8SRestInterfaceMock_Patch_Call {
	return &K8SRestInterfaceMock_Patch_Call{Call: _e.mock.On("Patch", pt)}
}

func (_c *K8SRestInterfaceMock_Patch_Call) Run(run func(pt types.PatchType)) *K8SRestInterfaceMock_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.PatchType))
	})
	return _c
}

func (_c *K8SRestInterfaceMock_Patch_Call) Return(_a0 *rest.Request) *K8SRestInterfaceMock_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_Patch_Call) RunAndReturn(run func(types.PatchType) *rest.Request) *K8SRestInterfaceMock_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields:
func (_m *K8SRestInterfaceMock) Post() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// K8SRestInterfaceMock_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type K8SRestInterfaceMock_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
func (_e *K8SRestInterfaceMock_Expecter) Post() *K8SRestInterfaceMock_Post_Call {
	return &K8SRestInterfaceMock_Post_Call{Call: _e.mock.On("Post")}
}

func (_c *K8SRestInterfaceMock_Post_Call) Run(run func()) *K8SRestInterfaceMock_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8SRestInterfaceMock_Post_Call) Return(_a0 *rest.Request) *K8SRestInterfaceMock_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_Post_Call) RunAndReturn(run func() *rest.Request) *K8SRestInterfaceMock_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields:
func (_m *K8SRestInterfaceMock) Put() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// K8SRestInterfaceMock_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type K8SRestInterfaceMock_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
func (_e *K8SRestInterfaceMock_Expecter) Put() *K8SRestInterfaceMock_Put_Call {
	return &K8SRestInterfaceMock_Put_Call{Call: _e.mock.On("Put")}
}

func (_c *K8SRestInterfaceMock_Put_Call) Run(run func()) *K8SRestInterfaceMock_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8SRestInterfaceMock_Put_Call) Return(_a0 *rest.Request) *K8SRestInterfaceMock_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_Put_Call) RunAndReturn(run func() *rest.Request) *K8SRestInterfaceMock_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Verb provides a mock function with given fields: verb
func (_m *K8SRestInterfaceMock) Verb(verb string) *rest.Request {
	ret := _m.Called(verb)

	if len(ret) == 0 {
		panic("no return value specified for Verb")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func(string) *rest.Request); ok {
		r0 = rf(verb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// K8SRestInterfaceMock_Verb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verb'
type K8SRestInterfaceMock_Verb_Call struct {
	*mock.Call
}

// Verb is a helper method to define mock.On call
//   - verb string
func (_e *K8SRestInterfaceMock_Expecter) Verb(verb interface{}) *K8SRestInterfaceMock_Verb_Call {
	return &K8SRestInterfaceMock_Verb_Call{Call: _e.mock.On("Verb", verb)}
}

func (_c *K8SRestInterfaceMock_Verb_Call) Run(run func(verb string)) *K8SRestInterfaceMock_Verb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *K8SRestInterfaceMock_Verb_Call) Return(_a0 *rest.Request) *K8SRestInterfaceMock_Verb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8SRestInterfaceMock_Verb_Call) RunAndReturn(run func(string) *rest.Request) *K8SRestInterfaceMock_Verb_Call {
	_c.Call.Return(run)
	return _c
}

// NewK8SRestInterfaceMock creates a new instance of K8SRestInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewK8SRestInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *K8SRestInterfaceMock {
	mock := &K8SRestInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
