// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package mocks

import (
	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackNotifierMock is an autogenerated mock type for the slackNotifier type
type SlackNotifierMock struct {
	mock.Mock
}

type SlackNotifierMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackNotifierMock) EXPECT() *SlackNotifierMock_Expecter {
	return &SlackNotifierMock_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *SlackNotifierMock) GetUserByEmail(email string) (*slack.User, error) {
	ret := _m.Called(email)

	var r0 *slack.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*slack.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *slack.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackNotifierMock_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type SlackNotifierMock_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *SlackNotifierMock_Expecter) GetUserByEmail(email interface{}) *SlackNotifierMock_GetUserByEmail_Call {
	return &SlackNotifierMock_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *SlackNotifierMock_GetUserByEmail_Call) Run(run func(email string)) *SlackNotifierMock_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SlackNotifierMock_GetUserByEmail_Call) Return(_a0 *slack.User, _a1 error) *SlackNotifierMock_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SlackNotifierMock_GetUserByEmail_Call) RunAndReturn(run func(string) (*slack.User, error)) *SlackNotifierMock_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// PostMessage provides a mock function with given fields: channelID, options
func (_m *SlackNotifierMock) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) (string, string, error)); ok {
		return rf(channelID, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = rf(channelID, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, ...slack.MsgOption) error); ok {
		r2 = rf(channelID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SlackNotifierMock_PostMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostMessage'
type SlackNotifierMock_PostMessage_Call struct {
	*mock.Call
}

// PostMessage is a helper method to define mock.On call
//   - channelID string
//   - options ...slack.MsgOption
func (_e *SlackNotifierMock_Expecter) PostMessage(channelID interface{}, options ...interface{}) *SlackNotifierMock_PostMessage_Call {
	return &SlackNotifierMock_PostMessage_Call{Call: _e.mock.On("PostMessage",
		append([]interface{}{channelID}, options...)...)}
}

func (_c *SlackNotifierMock_PostMessage_Call) Run(run func(channelID string, options ...slack.MsgOption)) *SlackNotifierMock_PostMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.MsgOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SlackNotifierMock_PostMessage_Call) Return(_a0 string, _a1 string, _a2 error) *SlackNotifierMock_PostMessage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SlackNotifierMock_PostMessage_Call) RunAndReturn(run func(string, ...slack.MsgOption) (string, string, error)) *SlackNotifierMock_PostMessage_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSlackNotifierMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackNotifierMock creates a new instance of SlackNotifierMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackNotifierMock(t mockConstructorTestingTNewSlackNotifierMock) *SlackNotifierMock {
	mock := &SlackNotifierMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
