// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023 Datadog, Inc.
package mocks

import mock "github.com/stretchr/testify/mock"

// ProcessRuntimeMock is an autogenerated mock type for the Runtime type
type ProcessRuntimeMock struct {
	mock.Mock
}

type ProcessRuntimeMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessRuntimeMock) EXPECT() *ProcessRuntimeMock_Expecter {
	return &ProcessRuntimeMock_Expecter{mock: &_m.Mock}
}

// GOMAXPROCS provides a mock function with given fields: _a0
func (_m *ProcessRuntimeMock) GOMAXPROCS(_a0 int) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ProcessRuntimeMock_GOMAXPROCS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GOMAXPROCS'
type ProcessRuntimeMock_GOMAXPROCS_Call struct {
	*mock.Call
}

// GOMAXPROCS is a helper method to define mock.On call
//   - _a0 int
func (_e *ProcessRuntimeMock_Expecter) GOMAXPROCS(_a0 interface{}) *ProcessRuntimeMock_GOMAXPROCS_Call {
	return &ProcessRuntimeMock_GOMAXPROCS_Call{Call: _e.mock.On("GOMAXPROCS", _a0)}
}

func (_c *ProcessRuntimeMock_GOMAXPROCS_Call) Run(run func(_a0 int)) *ProcessRuntimeMock_GOMAXPROCS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ProcessRuntimeMock_GOMAXPROCS_Call) Return(_a0 int) *ProcessRuntimeMock_GOMAXPROCS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProcessRuntimeMock_GOMAXPROCS_Call) RunAndReturn(run func(int) int) *ProcessRuntimeMock_GOMAXPROCS_Call {
	_c.Call.Return(run)
	return _c
}

// LockOSThread provides a mock function with given fields:
func (_m *ProcessRuntimeMock) LockOSThread() {
	_m.Called()
}

// ProcessRuntimeMock_LockOSThread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockOSThread'
type ProcessRuntimeMock_LockOSThread_Call struct {
	*mock.Call
}

// LockOSThread is a helper method to define mock.On call
func (_e *ProcessRuntimeMock_Expecter) LockOSThread() *ProcessRuntimeMock_LockOSThread_Call {
	return &ProcessRuntimeMock_LockOSThread_Call{Call: _e.mock.On("LockOSThread")}
}

func (_c *ProcessRuntimeMock_LockOSThread_Call) Run(run func()) *ProcessRuntimeMock_LockOSThread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProcessRuntimeMock_LockOSThread_Call) Return() *ProcessRuntimeMock_LockOSThread_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProcessRuntimeMock_LockOSThread_Call) RunAndReturn(run func()) *ProcessRuntimeMock_LockOSThread_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockOSThread provides a mock function with given fields:
func (_m *ProcessRuntimeMock) UnlockOSThread() {
	_m.Called()
}

// ProcessRuntimeMock_UnlockOSThread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockOSThread'
type ProcessRuntimeMock_UnlockOSThread_Call struct {
	*mock.Call
}

// UnlockOSThread is a helper method to define mock.On call
func (_e *ProcessRuntimeMock_Expecter) UnlockOSThread() *ProcessRuntimeMock_UnlockOSThread_Call {
	return &ProcessRuntimeMock_UnlockOSThread_Call{Call: _e.mock.On("UnlockOSThread")}
}

func (_c *ProcessRuntimeMock_UnlockOSThread_Call) Run(run func()) *ProcessRuntimeMock_UnlockOSThread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProcessRuntimeMock_UnlockOSThread_Call) Return() *ProcessRuntimeMock_UnlockOSThread_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProcessRuntimeMock_UnlockOSThread_Call) RunAndReturn(run func()) *ProcessRuntimeMock_UnlockOSThread_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewProcessRuntimeMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessRuntimeMock creates a new instance of ProcessRuntimeMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessRuntimeMock(t mockConstructorTestingTNewProcessRuntimeMock) *ProcessRuntimeMock {
	mock := &ProcessRuntimeMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
