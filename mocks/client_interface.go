// Code generated by mockery. DO NOT EDIT.

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2024 Datadog, Inc.
package mocks

import (
	statsd "github.com/DataDog/datadog-go/statsd"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ClientStatsdMock is an autogenerated mock type for the ClientInterface type
type ClientStatsdMock struct {
	mock.Mock
}

type ClientStatsdMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientStatsdMock) EXPECT() *ClientStatsdMock_Expecter {
	return &ClientStatsdMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *ClientStatsdMock) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ClientStatsdMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ClientStatsdMock_Expecter) Close() *ClientStatsdMock_Close_Call {
	return &ClientStatsdMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ClientStatsdMock_Close_Call) Run(run func()) *ClientStatsdMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientStatsdMock_Close_Call) Return(_a0 error) *ClientStatsdMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Close_Call) RunAndReturn(run func() error) *ClientStatsdMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with given fields: name, value, tags, rate
func (_m *ClientStatsdMock) Count(name string, value int64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type ClientStatsdMock_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - name string
//   - value int64
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Count(name interface{}, value interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Count_Call {
	return &ClientStatsdMock_Count_Call{Call: _e.mock.On("Count", name, value, tags, rate)}
}

func (_c *ClientStatsdMock_Count_Call) Run(run func(name string, value int64, tags []string, rate float64)) *ClientStatsdMock_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Count_Call) Return(_a0 error) *ClientStatsdMock_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Count_Call) RunAndReturn(run func(string, int64, []string, float64) error) *ClientStatsdMock_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Decr provides a mock function with given fields: name, tags, rate
func (_m *ClientStatsdMock) Decr(name string, tags []string, rate float64) error {
	ret := _m.Called(name, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Decr")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, float64) error); ok {
		r0 = rf(name, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Decr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decr'
type ClientStatsdMock_Decr_Call struct {
	*mock.Call
}

// Decr is a helper method to define mock.On call
//   - name string
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Decr(name interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Decr_Call {
	return &ClientStatsdMock_Decr_Call{Call: _e.mock.On("Decr", name, tags, rate)}
}

func (_c *ClientStatsdMock_Decr_Call) Run(run func(name string, tags []string, rate float64)) *ClientStatsdMock_Decr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Decr_Call) Return(_a0 error) *ClientStatsdMock_Decr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Decr_Call) RunAndReturn(run func(string, []string, float64) error) *ClientStatsdMock_Decr_Call {
	_c.Call.Return(run)
	return _c
}

// Distribution provides a mock function with given fields: name, value, tags, rate
func (_m *ClientStatsdMock) Distribution(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Distribution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Distribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distribution'
type ClientStatsdMock_Distribution_Call struct {
	*mock.Call
}

// Distribution is a helper method to define mock.On call
//   - name string
//   - value float64
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Distribution(name interface{}, value interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Distribution_Call {
	return &ClientStatsdMock_Distribution_Call{Call: _e.mock.On("Distribution", name, value, tags, rate)}
}

func (_c *ClientStatsdMock_Distribution_Call) Run(run func(name string, value float64, tags []string, rate float64)) *ClientStatsdMock_Distribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Distribution_Call) Return(_a0 error) *ClientStatsdMock_Distribution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Distribution_Call) RunAndReturn(run func(string, float64, []string, float64) error) *ClientStatsdMock_Distribution_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields: e
func (_m *ClientStatsdMock) Event(e *statsd.Event) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Event")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*statsd.Event) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type ClientStatsdMock_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
//   - e *statsd.Event
func (_e *ClientStatsdMock_Expecter) Event(e interface{}) *ClientStatsdMock_Event_Call {
	return &ClientStatsdMock_Event_Call{Call: _e.mock.On("Event", e)}
}

func (_c *ClientStatsdMock_Event_Call) Run(run func(e *statsd.Event)) *ClientStatsdMock_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*statsd.Event))
	})
	return _c
}

func (_c *ClientStatsdMock_Event_Call) Return(_a0 error) *ClientStatsdMock_Event_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Event_Call) RunAndReturn(run func(*statsd.Event) error) *ClientStatsdMock_Event_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields:
func (_m *ClientStatsdMock) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type ClientStatsdMock_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *ClientStatsdMock_Expecter) Flush() *ClientStatsdMock_Flush_Call {
	return &ClientStatsdMock_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *ClientStatsdMock_Flush_Call) Run(run func()) *ClientStatsdMock_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientStatsdMock_Flush_Call) Return(_a0 error) *ClientStatsdMock_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Flush_Call) RunAndReturn(run func() error) *ClientStatsdMock_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Gauge provides a mock function with given fields: name, value, tags, rate
func (_m *ClientStatsdMock) Gauge(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Gauge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Gauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gauge'
type ClientStatsdMock_Gauge_Call struct {
	*mock.Call
}

// Gauge is a helper method to define mock.On call
//   - name string
//   - value float64
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Gauge(name interface{}, value interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Gauge_Call {
	return &ClientStatsdMock_Gauge_Call{Call: _e.mock.On("Gauge", name, value, tags, rate)}
}

func (_c *ClientStatsdMock_Gauge_Call) Run(run func(name string, value float64, tags []string, rate float64)) *ClientStatsdMock_Gauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Gauge_Call) Return(_a0 error) *ClientStatsdMock_Gauge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Gauge_Call) RunAndReturn(run func(string, float64, []string, float64) error) *ClientStatsdMock_Gauge_Call {
	_c.Call.Return(run)
	return _c
}

// Histogram provides a mock function with given fields: name, value, tags, rate
func (_m *ClientStatsdMock) Histogram(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Histogram")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Histogram'
type ClientStatsdMock_Histogram_Call struct {
	*mock.Call
}

// Histogram is a helper method to define mock.On call
//   - name string
//   - value float64
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Histogram(name interface{}, value interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Histogram_Call {
	return &ClientStatsdMock_Histogram_Call{Call: _e.mock.On("Histogram", name, value, tags, rate)}
}

func (_c *ClientStatsdMock_Histogram_Call) Run(run func(name string, value float64, tags []string, rate float64)) *ClientStatsdMock_Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Histogram_Call) Return(_a0 error) *ClientStatsdMock_Histogram_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Histogram_Call) RunAndReturn(run func(string, float64, []string, float64) error) *ClientStatsdMock_Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// Incr provides a mock function with given fields: name, tags, rate
func (_m *ClientStatsdMock) Incr(name string, tags []string, rate float64) error {
	ret := _m.Called(name, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Incr")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, float64) error); ok {
		r0 = rf(name, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Incr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Incr'
type ClientStatsdMock_Incr_Call struct {
	*mock.Call
}

// Incr is a helper method to define mock.On call
//   - name string
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Incr(name interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Incr_Call {
	return &ClientStatsdMock_Incr_Call{Call: _e.mock.On("Incr", name, tags, rate)}
}

func (_c *ClientStatsdMock_Incr_Call) Run(run func(name string, tags []string, rate float64)) *ClientStatsdMock_Incr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Incr_Call) Return(_a0 error) *ClientStatsdMock_Incr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Incr_Call) RunAndReturn(run func(string, []string, float64) error) *ClientStatsdMock_Incr_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceCheck provides a mock function with given fields: sc
func (_m *ClientStatsdMock) ServiceCheck(sc *statsd.ServiceCheck) error {
	ret := _m.Called(sc)

	if len(ret) == 0 {
		panic("no return value specified for ServiceCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*statsd.ServiceCheck) error); ok {
		r0 = rf(sc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_ServiceCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceCheck'
type ClientStatsdMock_ServiceCheck_Call struct {
	*mock.Call
}

// ServiceCheck is a helper method to define mock.On call
//   - sc *statsd.ServiceCheck
func (_e *ClientStatsdMock_Expecter) ServiceCheck(sc interface{}) *ClientStatsdMock_ServiceCheck_Call {
	return &ClientStatsdMock_ServiceCheck_Call{Call: _e.mock.On("ServiceCheck", sc)}
}

func (_c *ClientStatsdMock_ServiceCheck_Call) Run(run func(sc *statsd.ServiceCheck)) *ClientStatsdMock_ServiceCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*statsd.ServiceCheck))
	})
	return _c
}

func (_c *ClientStatsdMock_ServiceCheck_Call) Return(_a0 error) *ClientStatsdMock_ServiceCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_ServiceCheck_Call) RunAndReturn(run func(*statsd.ServiceCheck) error) *ClientStatsdMock_ServiceCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: name, value, tags, rate
func (_m *ClientStatsdMock) Set(name string, value string, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type ClientStatsdMock_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - name string
//   - value string
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Set(name interface{}, value interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Set_Call {
	return &ClientStatsdMock_Set_Call{Call: _e.mock.On("Set", name, value, tags, rate)}
}

func (_c *ClientStatsdMock_Set_Call) Run(run func(name string, value string, tags []string, rate float64)) *ClientStatsdMock_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Set_Call) Return(_a0 error) *ClientStatsdMock_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Set_Call) RunAndReturn(run func(string, string, []string, float64) error) *ClientStatsdMock_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteTimeout provides a mock function with given fields: d
func (_m *ClientStatsdMock) SetWriteTimeout(d time.Duration) error {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteTimeout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_SetWriteTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteTimeout'
type ClientStatsdMock_SetWriteTimeout_Call struct {
	*mock.Call
}

// SetWriteTimeout is a helper method to define mock.On call
//   - d time.Duration
func (_e *ClientStatsdMock_Expecter) SetWriteTimeout(d interface{}) *ClientStatsdMock_SetWriteTimeout_Call {
	return &ClientStatsdMock_SetWriteTimeout_Call{Call: _e.mock.On("SetWriteTimeout", d)}
}

func (_c *ClientStatsdMock_SetWriteTimeout_Call) Run(run func(d time.Duration)) *ClientStatsdMock_SetWriteTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *ClientStatsdMock_SetWriteTimeout_Call) Return(_a0 error) *ClientStatsdMock_SetWriteTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_SetWriteTimeout_Call) RunAndReturn(run func(time.Duration) error) *ClientStatsdMock_SetWriteTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// SimpleEvent provides a mock function with given fields: title, text
func (_m *ClientStatsdMock) SimpleEvent(title string, text string) error {
	ret := _m.Called(title, text)

	if len(ret) == 0 {
		panic("no return value specified for SimpleEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(title, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_SimpleEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimpleEvent'
type ClientStatsdMock_SimpleEvent_Call struct {
	*mock.Call
}

// SimpleEvent is a helper method to define mock.On call
//   - title string
//   - text string
func (_e *ClientStatsdMock_Expecter) SimpleEvent(title interface{}, text interface{}) *ClientStatsdMock_SimpleEvent_Call {
	return &ClientStatsdMock_SimpleEvent_Call{Call: _e.mock.On("SimpleEvent", title, text)}
}

func (_c *ClientStatsdMock_SimpleEvent_Call) Run(run func(title string, text string)) *ClientStatsdMock_SimpleEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ClientStatsdMock_SimpleEvent_Call) Return(_a0 error) *ClientStatsdMock_SimpleEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_SimpleEvent_Call) RunAndReturn(run func(string, string) error) *ClientStatsdMock_SimpleEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SimpleServiceCheck provides a mock function with given fields: name, status
func (_m *ClientStatsdMock) SimpleServiceCheck(name string, status statsd.ServiceCheckStatus) error {
	ret := _m.Called(name, status)

	if len(ret) == 0 {
		panic("no return value specified for SimpleServiceCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, statsd.ServiceCheckStatus) error); ok {
		r0 = rf(name, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_SimpleServiceCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimpleServiceCheck'
type ClientStatsdMock_SimpleServiceCheck_Call struct {
	*mock.Call
}

// SimpleServiceCheck is a helper method to define mock.On call
//   - name string
//   - status statsd.ServiceCheckStatus
func (_e *ClientStatsdMock_Expecter) SimpleServiceCheck(name interface{}, status interface{}) *ClientStatsdMock_SimpleServiceCheck_Call {
	return &ClientStatsdMock_SimpleServiceCheck_Call{Call: _e.mock.On("SimpleServiceCheck", name, status)}
}

func (_c *ClientStatsdMock_SimpleServiceCheck_Call) Run(run func(name string, status statsd.ServiceCheckStatus)) *ClientStatsdMock_SimpleServiceCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(statsd.ServiceCheckStatus))
	})
	return _c
}

func (_c *ClientStatsdMock_SimpleServiceCheck_Call) Return(_a0 error) *ClientStatsdMock_SimpleServiceCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_SimpleServiceCheck_Call) RunAndReturn(run func(string, statsd.ServiceCheckStatus) error) *ClientStatsdMock_SimpleServiceCheck_Call {
	_c.Call.Return(run)
	return _c
}

// TimeInMilliseconds provides a mock function with given fields: name, value, tags, rate
func (_m *ClientStatsdMock) TimeInMilliseconds(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for TimeInMilliseconds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_TimeInMilliseconds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeInMilliseconds'
type ClientStatsdMock_TimeInMilliseconds_Call struct {
	*mock.Call
}

// TimeInMilliseconds is a helper method to define mock.On call
//   - name string
//   - value float64
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) TimeInMilliseconds(name interface{}, value interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_TimeInMilliseconds_Call {
	return &ClientStatsdMock_TimeInMilliseconds_Call{Call: _e.mock.On("TimeInMilliseconds", name, value, tags, rate)}
}

func (_c *ClientStatsdMock_TimeInMilliseconds_Call) Run(run func(name string, value float64, tags []string, rate float64)) *ClientStatsdMock_TimeInMilliseconds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_TimeInMilliseconds_Call) Return(_a0 error) *ClientStatsdMock_TimeInMilliseconds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_TimeInMilliseconds_Call) RunAndReturn(run func(string, float64, []string, float64) error) *ClientStatsdMock_TimeInMilliseconds_Call {
	_c.Call.Return(run)
	return _c
}

// Timing provides a mock function with given fields: name, value, tags, rate
func (_m *ClientStatsdMock) Timing(name string, value time.Duration, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	if len(ret) == 0 {
		panic("no return value specified for Timing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStatsdMock_Timing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timing'
type ClientStatsdMock_Timing_Call struct {
	*mock.Call
}

// Timing is a helper method to define mock.On call
//   - name string
//   - value time.Duration
//   - tags []string
//   - rate float64
func (_e *ClientStatsdMock_Expecter) Timing(name interface{}, value interface{}, tags interface{}, rate interface{}) *ClientStatsdMock_Timing_Call {
	return &ClientStatsdMock_Timing_Call{Call: _e.mock.On("Timing", name, value, tags, rate)}
}

func (_c *ClientStatsdMock_Timing_Call) Run(run func(name string, value time.Duration, tags []string, rate float64)) *ClientStatsdMock_Timing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration), args[2].([]string), args[3].(float64))
	})
	return _c
}

func (_c *ClientStatsdMock_Timing_Call) Return(_a0 error) *ClientStatsdMock_Timing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientStatsdMock_Timing_Call) RunAndReturn(run func(string, time.Duration, []string, float64) error) *ClientStatsdMock_Timing_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientStatsdMock creates a new instance of ClientStatsdMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientStatsdMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientStatsdMock {
	mock := &ClientStatsdMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
